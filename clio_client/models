# generated by datamodel-codegen:
#   filename:  merged_openapi.yaml
#   timestamp: 2025-05-17T04:50:52+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from decimal import Decimal
from enum import Enum
from typing import Any

from pydantic import BaseModel, ConfigDict, Field


class AccountBalanceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *AccountBalance*
    """
    balance: float | None
    """
    The current balance of the bank account available to the matter or contact
    """
    type: str | None
    """
    The bank account type. Either Operating or Trust
    """
    name: str | None
    """
    The name of the bank account
    """
    currency_id: int | None
    """
    The currency ID of the bank account
    """


class AccountBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Account*
    """
    etag: str | None
    """
    ETag for the *Account*
    """
    name: str | None
    """
    The name of the *Account*
    """
    state: str | None
    """
    Account state
    """
    created_at: datetime | None
    """
    The time the *Account* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Account* was last updated (as a ISO-8601 timestamp)
    """


class ActivityBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Activity*
    """
    etag: str | None
    """
    ETag for the *Activity*
    """
    type: Type3 | None
    """
    The type of the *Activity*
    """
    date: date_aliased | None
    """
    The date the *Activity* was performed (as a ISO-8601 date)
    """
    quantity_in_hours: float | None
    """
    The number of hours the TimeEntry took.
    """
    rounded_quantity_in_hours: float | None
    """
    The number of hours rounded accordingly to the billing settings.
    The rounded value is used to calculate the total.

    """
    quantity: float | None
    """
    The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.

    **Version <= 4.0.3:**
    The number of hours the TimeEntry took.

    **Latest version:**
    The number of seconds the TimeEntry took.

    """
    rounded_quantity: float | None
    """
    The field is applicable to time entries only.

    **Version <= 4.0.3:**
    The number of hours rounded accordingly to the billing settings.
    The rounded value is used to calculate the total.

    **Latest version:**
    The number of seconds rounded accordingly to the billing settings.
    The rounded value is used to calculate the total.

    """
    quantity_redacted: bool | None
    """
    Is `true` if any of the following fields are redacted:
    `quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total`

    """
    price: float | None
    """
    The hourly or flat rate of the *Activity*
    """
    note: str | None
    """
    The details about the *Activity*
    """
    flat_rate: bool | None
    """
    Whether the *Activity* is a flat rate
    """
    billed: bool | None
    """
    Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`
    """
    on_bill: bool | None
    """
    Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`
    """
    total: float | None
    """
    The total cost of draft, billable and billed items in the *Activity*
    """
    contingency_fee: bool | None
    """
    Whether or not the *Activity* is a contingency fee
    """
    created_at: datetime | None
    """
    The time the *Activity* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Activity* was last updated (as a ISO-8601 timestamp)
    """
    reference: str | None
    """
    A check reference for a HardCostEntry.
    """
    non_billable: bool | None
    """
    Whether the *Activity* is non-billable
    """
    non_billable_total: float | None
    """
    The total cost of non-billable items in the *Activity*
    """
    no_charge: bool | None
    """
    Whether the non-billable *Activity* is shown on the bill.
    """
    tax_setting: TaxSetting | None
    """
    The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.
    """
    currency: dict[str, Any] | None
    """
    The currency of the *Activity*
    """


class ActivityCalendarEntryBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: str | None
    """
    Unique identifier for the *CalendarEntry*
    """
    etag: str | None
    """
    ETag for the *CalendarEntry*
    """
    calendar_owner_id: int | None
    """
    The id of the calendar owner.
    """


class ActivityDescriptionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ActivityDescription*
    """
    etag: str | None
    """
    ETag for the *ActivityDescription*
    """
    name: str | None
    """
    The name of the *ActivityDescription*
    """
    visible_to_co_counsel: bool | None
    """
    A toggle that determines if a co-counsel user of the firm can have access to this activity description
    """
    created_at: datetime | None
    """
    The time the *ActivityDescription* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ActivityDescription* was last updated (as a ISO-8601 timestamp)
    """
    default: bool | None
    """
    Whether it is the user's default activity description
    """
    type: str | None
    """
    The type of the *ActivityDescription*
    """
    utbms_activity_id: int | None
    """
    The UTBMS activity id if the *ActivityDescription* is a UTBMS activity description
    """
    utbms_task_name: str | None
    """
    The UTBMS activity task name if attached to a UTBMS activity description
    """
    utbms_task_id: int | None
    """
    The UTBMS activity task id if attached to a UTBMS activity description
    """
    xero_service_code: str | None
    """
    Custom Xero service code for this activity description
    """
    accessible_to_user: bool | None
    """
    Determines if activity description is accessible to user
    """
    category_type: str | None
    """
    Activity category rate type. Either hourly or flat fee
    """
    currency: dict[str, Any] | None
    """
    The currency of the activity description
    """


class ActivityDescriptionList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ActivityDescription]
    """
    ActivityDescription List Response
    """


class ActivityDescriptionRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    amount: float | None
    """
    Monetary value of this rate. Either hourly value or flat rate value
    """
    non_billable_amount: float | None
    """
    Monetary value of this rate for non billable activities. Either hourly value or flat rate value
    """
    type: Type20 | None
    """
    What kind of rate it is.
    """
    hierarchy: Hierarchy | None
    """
    What rate hierarchy the rate belongs to.
    """


class ActivityDescriptionShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ActivityDescription


class ActivityList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Activity]
    """
    Activity List Response
    """


class ActivityRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ActivityRate*
    """
    etag: str | None
    """
    ETag for the *ActivityRate*
    """
    rate: float | None
    """
    Monetary value of this rate. Either hourly value or flat rate value
    """
    flat_rate: bool | None
    """
    Whether this is a flat rate
    """
    created_at: datetime | None
    """
    The time the *ActivityRate* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ActivityRate* was last updated (as a ISO-8601 timestamp)
    """
    contact_id: int | None
    """
    Filter ActivityRate records for the contact.
    """
    co_counsel_contact_id: int | None
    """
    Filter ActivityRate records for the co-counsel.
    """


class ActivityRateList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ActivityRate]
    """
    ActivityRate List Response
    """


class ActivityRateShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ActivityRate


class ActivityShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Activity


class ActivityTaskBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Task*
    """
    etag: str | None
    """
    ETag for the *Task*
    """


class ActivityTextMessageConversationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TextMessageConversation*
    """
    etag: str | None
    """
    ETag for the *TextMessageConversation*
    """


class AddressBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Address*
    """
    etag: str | None
    """
    ETag for the *Address*
    """
    street: str | None
    """
    Street of the *Address*
    """
    city: str | None
    """
    City of the *Address*
    """
    province: str | None
    """
    Province or state of the *Address*
    """
    postal_code: str | None
    """
    Postal code of the *Address*
    """
    country: str | None
    """
    Country of the *Address*
    """
    name: Name | None
    """
    The name of the *Address*
    """
    created_at: datetime | None
    """
    The time the *Address* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Address* was last updated (as a ISO-8601 timestamp)
    """
    primary: bool | None
    """
    Whether it is the default for this contact
    """


class AllocationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Allocation*
    """
    etag: str | None
    """
    ETag for the *Allocation*
    """
    date: date_aliased | None
    """
    The date the allocation was applied (as a ISO-8601 date)
    """
    amount: float | None
    """
    The total amount of money that the user has allocated
    """
    interest: bool | None
    """
    Whether the allocation is applied to interest amount
    """
    voided_at: datetime | None
    """
    Time the *Allocation* was voided (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *Allocation* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Allocation* was last updated (as a ISO-8601 timestamp)
    """
    description: str | None
    """
    The description from the associated Credit Memo (if applicable)
    """
    has_online_payment: bool | None
    """
    Whether this allocation is associated with an online payment or not
    """
    destroyable: bool | None
    """
    Whether the record can be deleted or not
    """
    payment_type: str | None
    """
    A string indicating whether the payment is a card or an eCheck payment.
    """


class AllocationList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Allocation]
    """
    Allocation List Response
    """


class AllocationShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Allocation


class AttendeeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Attendee*
    """
    etag: str | None
    """
    ETag for the *Attendee*
    """
    type: Type21 | None
    """
    The class name of the *Attendee*
    """
    name: str | None
    """
    The name of the *Attendee*
    """
    enabled: bool | None
    """
    If the Attendee is a user, represents whether the user is enabled or disabled. Returns null if attendee is a Contact.
    """
    email: str | None
    """
    If the Attendee is a User, this is the User's email. If the Attendee is a contact, this is the Contact's primary email address.
    """
    created_at: datetime | None
    """
    The time the *Attendee* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Attendee* was last updated (as a ISO-8601 timestamp)
    """


class AvailableStateTransition(Enum):
    awaiting_approval = 'awaiting_approval'
    awaiting_payment = 'awaiting_payment'
    paid = 'paid'
    void = 'void'
    deleted = 'deleted'


class AvatarBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Avatar*
    """
    etag: str | None
    """
    ETag for the *Avatar*
    """
    created_at: datetime | None
    """
    The time the *Avatar* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Avatar* was last updated (as a ISO-8601 timestamp)
    """
    url: str | None
    """
    The URL for the *Avatar*
    """
    field_destroy: bool | None = Field(None, alias='_destroy')
    """
    Whether to destroy the *Avatar*
    """


class BalanceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Balance*
    """
    amount: float | None
    """
    The amount for this Balance.
    """
    type: Type4 | None
    """
    The type of Balance this data is for.
    """
    interest_amount: float | None
    """
    The interest amount for this Balance.
    """
    due: float | None
    """
    The amount due for this Balance, factoring in applicable discounts.
    """


class BankAccountBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    account_number: str | None
    """
    The account number for *BankAccount*
    """
    balance: float | None
    """
    The current balance of the *BankAccount*
    """
    bank_transactions_count: int | None
    """
    The number of bank transactions associated with the account.
    """
    clio_payment_page_link: str | None
    """
    Link to Single Payment Page which allows to transfer funds without logging in.
    """
    clio_payment_page_qr_code: str | None
    """
    A QR code that links to a Single Payment Page which allows to transfer funds without logging in.
    """
    clio_payments_enabled: bool | None
    """
    Whether the bank account is connected to Clio Payments
    """
    controlled_account: bool | None
    """
    Whether is a controlled account
    """
    created_at: datetime | None
    """
    The time the *BankAccount* was created (as a ISO-8601 timestamp)
    """
    currency: str | None
    """
    The currency type of the *BankAccount*
    """
    currency_symbol: str | None
    """
    The currency symbol of the *BankAccount*
    """
    currency_id: float | None
    """
    The currency ID of the *BankAccount*
    """
    default_account: bool | None
    """
    Whether it is the default account
    """
    domicile_branch: str | None
    """
    The name of the branch where the account was opened
    """
    etag: str | None
    """
    ETag for the *BankAccount*
    """
    general_ledger_number: str | None
    """
    General ledger number
    """
    holder: str | None
    """
    The name of the person or business that owns the *BankAccount*
    """
    id: int | None
    """
    Unique identifier for the *BankAccount*
    """
    institution: str | None
    """
    The financial institution where the *BankAccount* is registered
    """
    name: str | None
    """
    The name of the *BankAccount*
    """
    swift: str | None
    """
    A unique identification code for the financial institution
    """
    transit_number: str | None
    """
    Transit number for the bank account branch
    """
    type: Type5 | None
    """
    The type of the *BankAccount*
    """
    updated_at: datetime | None
    """
    The time the *BankAccount* was last updated (as a ISO-8601 timestamp)
    """


class BankAccountList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BankAccount]
    """
    BankAccount List Response
    """


class BankAccountShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: BankAccount


class BankTransactionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *BankTransaction*
    """
    type: str | None
    """
    The type of the *BankTransaction*
    """
    etag: str | None
    """
    ETag for the *BankTransaction*
    """
    created_at: datetime | None
    """
    The time the *BankTransaction* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *BankTransaction* was last updated (as a ISO-8601 timestamp)
    """
    bank_account_id: int | None
    """
    The associated bank account.
    """
    source: str | None
    """
    Where the transaction came from.
    """
    confirmation: str | None
    """
    The reference code for the transaction.
    """
    date: date_aliased | None
    """
    The date of the transaction.
    """
    amount: float | None
    """
    The amount of the transaction.
    """
    currency: str | None
    """
    The currency of the transaction.
    """
    currency_id: int | None
    """
    The id of the currency of the transaction.
    """
    description: str | None
    """
    The description of the transaction.
    """
    exchange_rate: float | None
    """
    The exchange rate of the transaction.
    """
    transaction_type: str | None
    """
    What kind of transaction.
    """
    funds_in: float | None
    """
    The amount of funds received in this transaction.
    """
    funds_out: float | None
    """
    The amount of funds withdrawn in this transaction.
    """
    clio_payments_transaction: bool | None
    """
    Whether the transaction was created through online payments.
    """
    current_account_balance: float | None
    """
    The current account balance.
    """
    read_only_confirmation: bool | None
    """
    Whether the transaction's reference code is read-only.
    """


class BankTransactionList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BankTransaction]
    """
    BankTransaction List Response
    """


class BankTransactionShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: BankTransaction


class BankTransferBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *BankTransfer*
    """
    etag: str | None
    """
    ETag for the *BankTransfer*
    """
    amount: float | None
    """
    The amount of the transfer.
    """
    date: datetime | None
    """
    The date of the transfer.
    """
    description: str | None
    """
    The description of the transfer.
    """
    primary_authorizer: str | None
    """
    The primary authorizer of the transfer.
    """
    secondary_authorizer: str | None
    """
    The secondary authorizer of the transfer.
    """
    created_at: datetime | None
    """
    The time the *BankTransfer* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *BankTransfer* was last updated (as a ISO-8601 timestamp)
    """


class BankTransferShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: BankTransfer


class BillBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Bill*
    """
    etag: str | None
    """
    ETag for the *Bill*
    """
    number: str | None
    """
    The *Bill* identifier (not necessarily numeric)'
    """
    issued_at: date_aliased | None
    """
    The time the *Bill* was issued (as a ISO-8601 date)
    """
    created_at: datetime | None
    """
    The time the *Bill* was created (as a ISO-8601 timestamp)
    """
    due_at: date_aliased | None
    """
    The date the *Bill* is due (as a ISO-8601 date)
    """
    tax_rate: float | None
    """
    The tax rate to the *Bill*
    """
    secondary_tax_rate: float | None
    """
    A secondary tax rate applied to the *Bill*
    """
    updated_at: datetime | None
    """
    The time the *Bill* was last updated (as a ISO-8601 timestamp)
    """
    subject: str | None
    """
    The subject of the *Bill*
    """
    purchase_order: str | None
    """
    The purchase order of the *Bill*
    """
    type: Type6 | None
    """
    The type of the *Bill*
    """
    memo: str | None
    """
    A memo for the *Bill*
    """
    start_at: date_aliased | None
    """
    The time the billing period starts (as a ISO-8601 date)
    """
    end_at: date_aliased | None
    """
    The time the billing period ends (as a ISO-8601 date)
    """
    balance: float | None
    """
    The outstanding balance of the *Bill*
    """
    state: State2 | None
    """
    The billing state the *Bill* is in
    """
    kind: Kind | None
    """
    The kind of the *Bill*
    """
    total: float | None
    """
    The total with interest of the *Bill*
    """
    paid: float | None
    """
    The total amount paid for the *Bill*
    """
    paid_at: datetime | None
    """
    The date of the last payment on the *Bill*
    """
    pending: float | None
    """
    The amount of pending credit card payments on the *Bill*
    """
    due: float | None
    """
    The total amount of the *Bill* with interest and less discounts
    """
    discount_services_only: str | None
    """
    The selected discount is applied to services only.
    """
    can_update: bool | None
    """
    This value indicates if your *Bill*'s line items and information can be updated.
    """
    credits_issued: float | None
    """
    The total credits issued for the *Bill*
    """
    shared: bool | None
    """
    Whether the *Bill* is a shared
    """
    last_sent_at: datetime | None
    """
    The last time the *Bill* was sent (as a ISO-8601 date)
    """
    services_secondary_tax: float | None
    """
    The total secondary tax of the bill's line items of a service kind
    """
    services_sub_total: float | None
    """
    The sub total of all the bill's line items of a service kind
    """
    services_tax: float | None
    """
    The total tax of the bill's line items of a service kind
    """
    services_taxable_sub_total: int | None
    """
    The services portion of the bill's primary tax
    """
    services_secondary_taxable_sub_total: int | None
    """
    The services portion of the bill's secondary tax
    """
    taxable_sub_total: int | None
    """
    The total taxable bill amount
    """
    secondary_taxable_sub_total: int | None
    """
    The subtotal of the bill's secondary tax
    """
    sub_total: float | None
    """
    Sub total for the *Bill*
    """
    tax_sum: float | None
    """
    Sum of primary tax for the model
    """
    secondary_tax_sum: float | None
    """
    Sum of secondary tax for the model
    """
    total_tax: float | None
    """
    The total amount of tax for the bill.
    """
    available_state_transitions: list[AvailableStateTransition] | None
    """
    The available *Bill* state transitions.
    """


class BillList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Bill]
    """
    Bill List Response
    """


class BillRecipientBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_at: datetime | None
    """
    The time the *BillRecipient* was created (as a ISO-8601 timestamp)
    """
    etag: str | None
    """
    ETag for the *BillRecipient*
    """
    id: int | None
    """
    Unique identifier for the *BillRecipient*
    """
    on_all_matters: bool | None
    """
    If the associated contact is a recipient for all of the bill's matters
    """
    updated_at: datetime | None
    """
    The time the *BillRecipient* was updated (as a ISO-8601 timestamp)
    """


class BillRecipientContactBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Contact*
    """
    name: str | None
    """
    The full name of the *Contact*
    """
    first_name: str | None
    """
    First name of the Person
    """
    middle_name: str | None
    """
    Middle name of the Person
    """
    last_name: str | None
    """
    Last name of the Person
    """
    type: Type9 | None
    """
    The type of the *Contact*
    """
    primary_email_address: str | None
    """
    The primary email address associated with this *Contact*.
    """


class BillShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Bill


class BillThemeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *BillTheme*
    """
    etag: str | None
    """
    ETag for the *BillTheme*
    """
    created_at: datetime | None
    """
    The time the *BillTheme* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *BillTheme* was last updated (as a ISO-8601 timestamp)
    """
    account_id: int | None
    """
    The account number the *BillTheme* belongs to
    """
    default: bool | None
    """
    Whether the *BillTheme* is the default for its account
    """
    name: str | None
    """
    The name of the *BillTheme*
    """
    config: str | None
    """
    The configuration of the *BillTheme*
    """


class BillThemeList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BillTheme]
    """
    BillTheme List Response
    """


class BillThemeShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: BillTheme


class BillableClientBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *BillableClient*
    """
    unbilled_hours: float | None
    """
    The unbilled hours of  the client
    """
    unbilled_amount: float | None
    """
    The unbilled amount of the client
    """
    amount_in_trust: float | None
    """
    The trust amount available for the client
    """
    name: str | None
    """
    The name of the Client
    """
    billable_matters_count: int | None
    """
    The total number of billable matters the client has
    """


class BillableClientList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BillableClient]
    """
    BillableClient List Response
    """


class BillableMatterBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    currency_code: str | None
    """
    The currency code
    """
    currency_id: int | None
    """
    The currency ID
    """
    id: int | None
    """
    Unique identifier for the *BillableMatter*
    """
    unbilled_hours: float | None
    """
    The unbilled number of hours for the matter
    """
    unbilled_amount: float | None
    """
    The unbilled amount for the matter
    """
    amount_in_trust: float | None
    """
    The trust amount available for the matter
    """
    display_number: str | None
    """
    The reference to the matter
    """


class BillableMatterList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BillableMatter]
    """
    BillableMatter List Response
    """


class BillableMatterShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: BillableMatter


class BillingMethod(Enum):
    flat = 'flat'
    contingency = 'contingency'
    hourly = 'hourly'


class BillingSettingBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *BillingSetting*
    """
    etag: str | None
    """
    ETag for the *BillingSetting*
    """
    rounded_duration: float | None
    """
    Rounded equivalent of duration submitted
    """
    rounding: int | None
    """
    Minute increment for time rounding
    """
    use_decimal_rounding: bool | None
    """
    Round time to two decimal places
    """
    currency: str | None
    """
    Current user setting of currency
    """
    currency_sign: str | None
    """
    The sign of the current currency
    """
    tax_rate: float | None
    """
    Rate applied for primary tax on invoices using this BillingSetting
    """
    tax_name: str | None
    """
    Name shown for primary tax on invoices using this BillingSetting
    """
    apply_tax_by_default: bool | None
    """
    Used to determine if primary tax should be applied to invoices by default
    """
    time_on_flat_rate_contingency_matters_is_non_billable: bool | None
    """
    Used to determine if hourly time entries on flat rate or contingency fee matters should be non-billable by default
    """
    use_secondary_tax: bool | None
    """
    Used to determine if secondary tax applies to invoices using this BillingSetting
    """
    secondary_tax_rate: float | None
    """
    Rate applied for secondary tax on invoices using this BillingSetting
    """
    secondary_tax_rule: SecondaryTaxRule | None
    """
    Used to determine if secondary tax should be applied separately or additionally to primary tax
    """
    secondary_tax_name: str | None
    """
    Name shown for secondary tax on invoices using this BillingSetting
    """
    notify_after_bill_created: bool | None
    """
    Flag to indicate if users should have the option to notify other users when generating a bill
    """
    use_utbms_codes: bool | None
    """
    Controls usage of UTBMS codes, allowing creation of coded time entries and expenses
    """
    created_at: datetime | None
    """
    The time the *BillingSetting* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *BillingSetting* was last updated (as a ISO-8601 timestamp)
    """


class BillingSettingShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: BillingSetting


class BillsStatus(Enum):
    not_yet_requested = 'not_yet_requested'
    requested = 'requested'
    received = 'received'
    incomplete = 'incomplete'
    certified = 'certified'


class CalendarBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Calendar*
    """
    etag: str | None
    """
    ETag for the *Calendar*
    """
    color: Color | None
    """
    Color
    """
    light_color: LightColor | None
    """
    Accent color to complement the main calendar color.
    """
    court_rules_default_calendar: bool | None
    """
    Whether the calendar is default court rules calendar for current user
    """
    name: str | None
    """
    The name of the *Calendar*
    """
    permission: Permission | None
    """
    The user's permission to the *Calendar*
    """
    type: Type7 | None
    """
    The type of the *Calendar*
    """
    visible: bool | None
    """
    Whether the *Calendar* will be shown by default in the Clio Web UI (assuming no source is provided).
    """
    created_at: datetime | None
    """
    The time the *Calendar* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Calendar* was last updated (as a ISO-8601 timestamp)
    """
    source: Source | None
    """
    The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').
    """


class CalendarEntryBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: str | None
    """
    Unique identifier for the *CalendarEntry*
    """
    etag: str | None
    """
    ETag for the *CalendarEntry*
    """
    summary: str | None
    """
    A short summary of the *CalendarEntry*
    """
    description: str | None
    """
    A detailed description of the *CalendarEntry*
    """
    location: str | None
    """
    The geographic location of the *CalendarEntry*
    """
    start_at: datetime | None
    """
    The time the *CalendarEntry* starts (as an ISO-8601 timestamp)
    """
    end_at: datetime | None
    """
    The time the *CalendarEntry* ends (as an ISO-8601 timestamp)
    """
    all_day: bool | None
    """
    Whether the event is all day
    """
    recurrence_rule: str | None
    """
    Recurrence rule for expanding
    """
    parent_calendar_entry_id: int | None
    """
    Identifier for the parent *CalendarEntry*
    """
    court_rule: bool | None
    """
    Whether this event is associated with a Court Rule
    """
    created_at: datetime | None
    """
    The time the *CalendarEntry* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)
    """
    permission: str | None
    """
    The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.
    """
    calendar_owner_id: int | None
    """
    The id of the calendar owner.
    """
    start_at_time_zone: str | None
    """
    Original start at time zone of the event.
    """
    time_entries_count: int | None
    """
    The number of `TimeEntry` activities associated with the *CalendarEntry*
    """


class CalendarEntryEventTypeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CalendarEntryEventType*
    """
    etag: str | None
    """
    ETag for the *CalendarEntryEventType*
    """
    created_at: datetime | None
    """
    The time the *CalendarEntryEventType* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CalendarEntryEventType* was last updated (as a ISO-8601 timestamp)
    """
    color: Color | None
    """
    The color describing the *CalendarEntryEventType*
    """
    name: str | None
    """
    The name for the *CalendarEntryEventType*
    """


class CalendarEntryList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CalendarEntry]
    """
    CalendarEntry List Response
    """


class CalendarEntryShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: CalendarEntry


class CalendarList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Calendar]
    """
    Calendar List Response
    """


class CalendarShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Calendar


class CalendarVisibilityBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CalendarVisibility*
    """
    etag: str | None
    """
    ETag for the *CalendarVisibility*
    """
    color: Color2 | None
    """
    Calendar color
    """
    light_color: LightColor | None
    """
    Accent color to complement the main calendar color.
    """
    visible: bool | None
    """
    Whether the *CalendarVisibility* will be shown by default in the Clio Web UI.
    """
    name: str | None
    """
    Calendar name
    """
    created_at: datetime | None
    """
    The time the *CalendarVisibility* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CalendarVisibility* was last updated (as a ISO-8601 timestamp)
    """


class CalendarVisibilityList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CalendarVisibility]
    """
    CalendarVisibility List Response
    """


class CalendarVisibilityShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: CalendarVisibility


class CascadingTaskTemplateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TaskTemplate*
    """
    name: str | None
    """
    The name of the *TaskTemplate*
    """


class Category(Enum):
    administrative = 'administrative'
    admiralty_and_maritime = 'admiralty_and_maritime'
    anti_trust_and_competition = 'anti_trust_and_competition'
    appellate = 'appellate'
    banking_and_finance = 'banking_and_finance'
    bankruptcy = 'bankruptcy'
    business_formation_and_compliance = 'business_formation_and_compliance'
    civil_litigation = 'civil_litigation'
    civil_rights_and_constitutional = 'civil_rights_and_constitutional'
    collections_and_debt = 'collections_and_debt'
    commercial_and_sale_of_goods = 'commercial_and_sale_of_goods'
    commercial_litigation = 'commercial_litigation'
    construction = 'construction'
    consumer_protection = 'consumer_protection'
    contracts = 'contracts'
    corporate_litigation = 'corporate_litigation'
    criminal = 'criminal'
    disability_and_social_security = 'disability_and_social_security'
    education = 'education'
    elder = 'elder'
    employment_and_labor = 'employment_and_labor'
    energy_and_environmental = 'energy_and_environmental'
    ethics = 'ethics'
    family = 'family'
    food_and_drug = 'food_and_drug'
    general_practice = 'general_practice'
    government = 'government'
    healthcare = 'healthcare'
    immigration = 'immigration'
    in_house_counsel = 'in_house_counsel'
    insurance = 'insurance'
    intellectual_property = 'intellectual_property'
    international = 'international'
    juvenile = 'juvenile'
    legal_aid = 'legal_aid'
    mediation_and_arbitration = 'mediation_and_arbitration'
    medical_malpractice = 'medical_malpractice'
    military = 'military'
    multi_practice = 'multi_practice'
    non_profit_and_pro_bono = 'non_profit_and_pro_bono'
    other = 'other'
    personal_injury = 'personal_injury'
    privacy_and_information_security = 'privacy_and_information_security'
    private_client = 'private_client'
    product_liability = 'product_liability'
    real_estate = 'real_estate'
    science_and_technology = 'science_and_technology'
    securities_and_mergers_and_acquisitions = 'securities_and_mergers_and_acquisitions'
    small_claims = 'small_claims'
    sports_and_entertainment_and_gaming = 'sports_and_entertainment_and_gaming'
    tax = 'tax'
    telecommunications = 'telecommunications'
    traffic_offenses = 'traffic_offenses'
    transportation = 'transportation'
    tribal = 'tribal'
    trusts = 'trusts'
    wills_and_estates = 'wills_and_estates'
    workers_compensation = 'workers_compensation'


class Category1(Enum):
    billing = 'billing'
    client = 'client'
    compliance = 'compliance'
    financial = 'financial'
    matter = 'matter'
    online_payments = 'online_payments'
    productivity = 'productivity'
    revenue = 'revenue'
    task = 'task'


class ClientBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Client*
    """
    name: str | None
    """
    The full name of the *Client*
    """
    first_name: str | None
    """
    First name of the Person
    """
    middle_name: str | None
    """
    Middle name of the Person
    """
    last_name: str | None
    """
    Last name of the Person
    """
    type: Type9 | None
    """
    The type of the *Client*
    """
    created_at: datetime | None
    """
    The time the *Client* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Client* was last updated (as a ISO-8601 timestamp)
    """
    prefix: str | None
    """
    The prefix of the *Client* (Mr, Mrs, etc)
    """
    title: str | None
    """
    The designated title of the *Client*
    """
    initials: str | None
    """
    The initials of the *Client*
    """
    is_matter_client: bool | None
    """
    Whether or not the Client is also the client of the matter
    """
    primary_email_address: str | None
    """
    The primary email address of client
    """
    primary_phone_number: str | None
    """
    The primary phone number of client
    """
    client_connect_user_id: int | None
    """
    The client connect ID of the contacts associated user
    """
    date_of_birth: date_aliased | None
    """
    Date of Birth
    """


class ClientPortalBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ClientPortal*
    """
    etag: str | None
    """
    ETag for the *ClientPortal*
    """
    created_at: datetime | None
    """
    The time the *ClientPortal* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ClientPortal* was last updated (as a ISO-8601 timestamp)
    """
    unread_count: int | None
    """
    The number of unread count messages for the current user.
    """
    unread_notifiable_count: int | None
    """
    The number of unread messages for the current user once their notification settings have been applied.
    """


class ClientShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Client


class ClioCreatorBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    account_owner: bool | None
    """
    Whether the *ClioCreator* is the owner of the account
    """
    clio_connect: bool | None
    """
    Whether the *ClioCreator* is a Clio Connect user
    """
    court_rules_default_attendee: bool | None
    """
    Whether the *ClioCreator* is a default attendee for court rules events
    """
    default_calendar_id: int | None
    """
    Default calendar id for *ClioCreator*.
    """
    email: str | None
    """
    The email of the *ClioCreator*
    """
    enabled: bool | None
    """
    Whether the *ClioCreator* is allowed to log in
    """
    etag: str | None
    """
    ETag for the *ClioCreator*
    """
    id: int | None
    """
    Unique identifier for the *ClioCreator*
    """
    type: Type22 | None
    """
    The type of the *ClioCreator*
    """
    initials: str | None
    """
    The initials of the *ClioCreator*
    """
    first_name: str | None
    """
    The first name of the *ClioCreator*
    """
    last_name: str | None
    """
    The last name of the *ClioCreator*
    """
    name: str | None
    """
    The full name of the *ClioCreator*
    """
    phone_number: str | None
    """
    The primary phone number for the *ClioCreator*.
    """
    rate: float | None
    """
    Default user activity rate for *ClioCreator*.
    """
    subscription_type: SubscriptionType | None
    """
    The subscription type of the *ClioCreator*
    """
    time_zone: str | None
    """
    The selected time zone of the *ClioCreator*
    """
    roles: list[str] | None
    """
    An array of roles assigned to this *ClioCreator*
    """
    created_at: datetime | None
    """
    The time the *ClioCreator* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ClioCreator* was last updated (as a ISO-8601 timestamp)
    """


class ClioPaymentsLinkBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    active: bool | None
    """
    Whether or not the payment link is active.
    """
    amount: float | None
    """
    The defined amount of the payment link, if set.
    """
    created_at: datetime | None
    """
    The time the *ClioPaymentsLink* was created (as a ISO-8601 timestamp)
    """
    currency: str | None
    """
    The currency the payment link will collect.
    """
    description: str | None
    """
    The defined description of the payment link, if set.
    """
    email_address: str | None
    """
    The email address to pre-fill the field on the the payment link, if set.
    """
    etag: str | None
    """
    ETag for the *ClioPaymentsLink*
    """
    expires_at: datetime | None
    """
    The ISO 8601 date and time the payment link will expire.
    """
    id: int | None
    """
    Unique identifier for the *ClioPaymentsLink*
    """
    is_allocated_as_revenue: bool | None
    """
    Whether the payment link is allocated as revenue.
    """
    redirect_url: str | None
    """
    The URL to redirect the client to after the payment has been made.
    """
    url: str | None
    """
    The URL of the payment link.
    """


class ClioPaymentsLinkList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ClioPaymentsLink]
    """
    ClioPaymentsLink List Response
    """


class ClioPaymentsLinkShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ClioPaymentsLink


class ClioPaymentsPaymentBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    amount: float | None
    """
    The amount of the payment.
    """
    confirmation_number: str | None
    """
    The confirmation number of the payment.
    """
    created_at: datetime | None
    """
    The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)
    """
    currency: str | None
    """
    The currency the payment was processed in.
    """
    deposit_as_revenue: bool | None
    """
    Whether the payment was deposited as revenue.
    """
    description: str | None
    """
    The description of the payment.
    """
    email_address: str | None
    """
    The email address of the client.
    """
    id: int | None
    """
    Unique identifier for the *ClioPaymentsPayment*
    """
    state: State3 | None
    """
    The state of the payment (authorized, completed, failed, etc).
    """
    updated_at: datetime | None
    """
    The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)
    """


class ClioPaymentsPaymentList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ClioPaymentsPayment]
    """
    ClioPaymentsPayment List Response
    """


class ClioPaymentsPaymentShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ClioPaymentsPayment


class Color(Enum):
    field_367_b9_c = '#367B9C'
    ffa5_a4 = '#FFA5A4'
    field_83_d17_f = '#83D17F'
    ffac7_b = '#FFAC7B'
    field_8_e3_f64 = '#8E3F64'
    c75300 = '#C75300'
    field_009_cec = '#009CEC'
    field_62_d6_b1 = '#62D6B1'
    field_9_eedcb = '#9EEDCB'
    f9_a2_c4 = '#F9A2C4'
    field_616161 = '#616161'
    bbda81 = '#BBDA81'
    dfd3_f8 = '#DFD3F8'
    d6_c4_a5 = '#D6C4A5'
    ffd478 = '#FFD478'
    field_6_ac9_de = '#6AC9DE'
    eabbb0 = '#EABBB0'
    bfc2_e1 = '#BFC2E1'
    dadada = '#DADADA'
    cde2_f5 = '#CDE2F5'


class Color2(Enum):
    field_658_cda = '#658CDA'
    da6666 = '#DA6666'
    field_49_b050 = '#49B050'
    e7804_c = '#E7804C'
    field_8_c66_da = '#8C66DA'
    c4_a882 = '#C4A882'
    field_64_ad88 = '#64AD88'
    field_84_aaa5 = '#84AAA5'
    field_56_bfb3 = '#56BFB3'
    e77399 = '#E77399'
    bfbf4_b = '#BFBF4B'
    field_8_bbf3_c = '#8BBF3C'
    b473_b4 = '#B473B4'
    a7_a77_d = '#A7A77D'
    f2_a53_d = '#F2A53D'
    field_658_cb3 = '#658CB3'
    be9494 = '#BE9494'
    a992_a9 = '#A992A9'
    field_8897_a5 = '#8897A5'
    field_93_a2_be = '#93A2BE'


class CommentBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Comment*
    """
    etag: str | None
    """
    ETag for the *Comment*
    """
    message: str | None
    """
    The content of the Comment
    """
    created_at: datetime | None
    """
    The time the *Comment* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Comment* was last updated (as a ISO-8601 timestamp)
    """


class CommentList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Comment]
    """
    Comment List Response
    """


class CommentShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Comment


class CommunicationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Communication*
    """
    etag: str | None
    """
    ETag for the *Communication*
    """
    subject: str | None
    """
    The subject line of the *Communication*
    """
    body: str | None
    """
    The main content of the *Communication*
    """
    type: Type8 | None
    """
    The type of the *Communication*
    """
    date: date_aliased | None
    """
    The date of the *Communication* (as a ISO-8601 datestamp)
    """
    time_entries_count: int | None
    """
    The number of time_entries associated with the *Communication*
    """
    created_at: datetime | None
    """
    The time the *Communication* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Communication* was last updated (as a ISO-8601 timestamp)
    """
    received_at: datetime | None
    """
    The date-time of the *Communication* (in ISO-8601 format)
    """


class CommunicationEmlFileBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CommunicationEmlFile*
    """


class CommunicationList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Communication]
    """
    Communication List Response
    """


class CommunicationShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Communication


class ConferenceMeetingBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    conference_id: int | None
    """
    Third-party provider unique meeting ID
    """
    conference_password: str | None
    """
    Third-party provider meeting password
    """
    created_at: datetime | None
    """
    The time the *ConferenceMeeting* was created (as a ISO-8601 timestamp)
    """
    etag: str | None
    """
    ETag for the *ConferenceMeeting*
    """
    id: int | None
    """
    Unique identifier for the *ConferenceMeeting*
    """
    join_url: str | None
    """
    URL for participants to join the video conference
    """
    type: str | None
    """
    The type of video conference
    """
    source_id: int | None
    """
    The external ID of the video conference meeting
    """
    updated_at: datetime | None
    """
    The time the *ConferenceMeeting* was last updated (as a ISO-8601 timestamp)
    """


class ContactBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Contact*
    """
    etag: str | None
    """
    ETag for the *Contact*
    """
    name: str | None
    """
    The full name of the *Contact*
    """
    first_name: str | None
    """
    First name of the Person
    """
    middle_name: str | None
    """
    Middle name of the Person
    """
    last_name: str | None
    """
    Last name of the Person
    """
    date_of_birth: date_aliased | None
    """
    Date of birth
    """
    type: Type9 | None
    """
    The type of the *Contact*
    """
    created_at: datetime | None
    """
    The time the *Contact* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Contact* was last updated (as a ISO-8601 timestamp)
    """
    prefix: str | None
    """
    The prefix of the *Contact* (Mr, Mrs, etc)
    """
    title: str | None
    """
    The designated title of the *Contact*
    """
    initials: str | None
    """
    The initials of the *Contact*
    """
    clio_connect_email: str | None
    """
    Clio Connect email if the *Contact* is a ClioConnect User
    """
    locked_clio_connect_email: bool | None
    """
    A boolean indicating if the ability to modify this *Contacts Clio connect email is locked.
    """
    client_connect_user_id: int | None
    """
    The ID for the Clio Connect user associated with this *Contact*
    """
    primary_email_address: str | None
    """
    The primary email address associated with this *Contact*.
    """
    secondary_email_address: str | None
    """
    The secondary email address associated with this *Contact*.
    """
    primary_phone_number: str | None
    """
    The primary phone number associated with this *Contact*.
    """
    secondary_phone_number: str | None
    """
    The secondary phone number of the *Contact*.
    """
    ledes_client_id: str | None
    """
    LEDES client id of the Contact
    """
    has_clio_for_clients_permission: bool | None
    """
    True if at least one resource has been shared with the contact using Clio for Clients.
    """
    is_client: bool | None
    """
    Whether or not the Contact is a client
    """
    is_clio_for_client_user: bool | None
    """
    Whether or not this contact has client_login and client_user (can be created due to addition to client portal or client_share_permissions)
    """
    is_co_counsel: bool | None
    """
    Whether or not the Contact has matters shared as co-counsel
    """
    is_bill_recipient: bool | None
    """
    Whether the Contact is a bill recipient on at least one matter.
    """
    sales_tax_number: str | None
    """
    The sales tax number of the *Contact*
    """
    currency: dict[str, Any] | None
    """
    Currency of the *Contact*
    """


class ContactList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Contact]
    """
    Contact List Response
    """


class ContactShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Contact


class ContingencyFeeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ContingencyFee*
    """
    etag: str | None
    """
    ETag for the *ContingencyFee*
    """
    created_at: datetime | None
    """
    The time the *ContingencyFee* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ContingencyFee* was last updated (as a ISO-8601 timestamp)
    """
    show_contingency_award: bool | None
    """
    Whether the *ContingencyFee* is posted or on a bill
    """


class ConversationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Conversation*
    """
    etag: str | None
    """
    ETag for the *Conversation*
    """
    archived: bool | None
    """
    Whether the conversation has been archived
    """
    read_only: bool | None
    """
    Whether the conversation is read only
    """
    current_user_is_member: bool | None
    """
    Whether the current user is a member of this conversation
    """
    subject: str | None
    """
    The subject of the *Conversation*
    """
    message_count: int | None
    """
    The number of messages in this conversation
    """
    time_entries_count: int | None
    """
    The number of time entries applied to this conversation
    """
    read: bool | None
    """
    Whether any messages in this conversation have been viewed
    """
    created_at: datetime | None
    """
    The time the *Conversation* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Conversation* was last updated (as a ISO-8601 timestamp)
    """


class ConversationList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Conversation]
    """
    Conversation List Response
    """


class ConversationMembershipBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ConversationMembership*
    """
    etag: str | None
    """
    ETag for the *ConversationMembership*
    """
    read: bool | None
    """
    Whether or not the ConversationMembership has been read by the member
    """
    archived: bool | None
    """
    Whether or not the ConversationMembership has been archived by the member
    """
    created_at: datetime | None
    """
    The time the *ConversationMembership* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ConversationMembership* was last updated (as a ISO-8601 timestamp)
    """


class ConversationMessageBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ConversationMessage*
    """
    etag: str | None
    """
    ETag for the *ConversationMessage*
    """
    date: str | None
    """
    The creation date of the message in the current user's time zone
    """
    body: str | None
    """
    The main content of the *ConversationMessage*
    """
    created_at: datetime | None
    """
    The time the *ConversationMessage* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ConversationMessage* was last updated (as a ISO-8601 timestamp)
    """


class ConversationMessageList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ConversationMessage]
    """
    ConversationMessage List Response
    """


class ConversationMessageShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ConversationMessage


class ConversationShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Conversation


class CreditMemoBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CreditMemo*
    """
    etag: str | None
    """
    ETag for the *CreditMemo*
    """
    date: date_aliased | None
    """
    Date the *CreditMemo* was recorded (as a ISO-8601 date)
    """
    amount: float | None
    """
    Total amount credited
    """
    description: str | None
    """
    A detailed description for the *CreditMemo*
    """
    discount: bool | None
    """
    Whether the *CreditMemo* is applied as discount
    """
    voided_at: datetime | None
    """
    Time the *CreditMemo* was voided (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *CreditMemo* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CreditMemo* was last updated (as a ISO-8601 timestamp)
    """


class CreditMemoList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CreditMemo]
    """
    CreditMemo List Response
    """


class CreditMemoShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: CreditMemo


class CurrencyBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Currency*
    """
    etag: str | None
    """
    ETag for the *Currency*
    """
    code: str | None
    """
    ISO 4217 code for the *Currency*
    """
    sign: str | None
    """
    Symbol used to denote monetary values using this *Currency*
    """
    created_at: datetime | None
    """
    The time the *Currency* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Currency* was last updated (as a ISO-8601 timestamp)
    """


class CurrencyList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Currency]
    """
    Currency List Response
    """


class CustomActionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CustomAction*
    """
    etag: str | None
    """
    ETag for the *CustomAction*
    """
    created_at: datetime | None
    """
    The time the *CustomAction* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CustomAction* was last updated (as a ISO-8601 timestamp)
    """
    label: str | None
    """
    Text label to be displayed on the custom link.
    """
    target_url: str | None
    """
    Target URL which will be opened in a new tab when the user clicks the custom link.
    """
    ui_reference: UiReference | None
    """
    UI reference location within Clio where the link will be displayed.
    """


class CustomActionList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CustomAction]
    """
    CustomAction List Response
    """


class CustomActionShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: CustomAction


class CustomFieldBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CustomField*
    """
    etag: str | None
    """
    ETag for the *CustomField*
    """
    created_at: datetime | None
    """
    The time the *CustomField* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CustomField* was last updated (as a ISO-8601 timestamp)
    """
    name: str | None
    """
    The name of the *CustomField*
    """
    parent_type: ParentType | None
    """
    Type of object the *CustomField* is for
    """
    field_type: FieldType | None
    """
    Field type of the *CustomField*
    """
    displayed: bool | None
    """
    Whether the *CustomField* is displayed by default
    """
    deleted: bool | None
    """
    Whether the *CustomField* is deleted for future use
    """
    required: bool | None
    """
    Whether the *CustomField* requires a value
    """
    display_order: int | None
    """
    The display position of the *CustomField*
    """


class CustomFieldList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CustomField]
    """
    CustomField List Response
    """


class CustomFieldMatterSelectionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CustomFieldMatterSelection*
    """
    display_number: str | None
    """
    The reference and label of the *CustomFieldMatterSelection*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.
    """


class CustomFieldSetAssociationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CustomFieldSetAssociation*
    """
    etag: str | None
    """
    ETag for the *CustomFieldSetAssociation*
    """
    display_order: int | None
    """
    The display position of the *CustomFieldSetAssociation*
    """
    created_at: datetime | None
    """
    The time the *CustomFieldSetAssociation* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CustomFieldSetAssociation* was last updated (as a ISO-8601 timestamp)
    """


class CustomFieldSetBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *CustomFieldSet*
    """
    etag: str | None
    """
    ETag for the *CustomFieldSet*
    """
    name: str | None
    """
    The name of the custom field set.
    """
    parent_type: ParentType | None
    """
    Type of object the *CustomFieldSet* is for.
    """
    displayed: bool | None
    """
    Whether or not the *CustomFieldSet* should be displayed by default.
    """
    created_at: datetime | None
    """
    The time the *CustomFieldSet* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CustomFieldSet* was last updated (as a ISO-8601 timestamp)
    """


class CustomFieldSetList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CustomFieldSet]
    """
    CustomFieldSet List Response
    """


class CustomFieldSetShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: CustomFieldSet


class CustomFieldShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: CustomField


class CustomFieldValueBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: str | None
    """
    Unique identifier for the *CustomFieldValue*
    """
    etag: str | None
    """
    ETag for the *CustomFieldValue*
    """
    field_name: str | None
    """
    The name of the custom field
    """
    created_at: datetime | None
    """
    The time the *CustomFieldValue* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *CustomFieldValue* was last updated (as a ISO-8601 timestamp)
    """
    field_type: FieldType | None
    """
    The type of the *CustomFieldValue*
    """
    field_required: bool | None
    """
    Whether the *CustomFieldValue* requires a value
    """
    field_displayed: bool | None
    """
    Whether the *CustomFieldValue* is displayed by default
    """
    field_display_order: int | None
    """
    The display position of the *CustomFieldValue*
    """
    value: str | None
    """
    The value of the *CustomFieldValue*
    """
    soft_deleted: bool | None
    """
    Whether the value is associated with a deleted custom field
    """


class DamageBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Damage*
    """
    amount: float | None
    """
    Amount for Damage
    """
    damage_type: DamageType | None
    """
    Damage type of the record
    """
    description: str | None
    """
    Description for Damage
    """
    etag: str | None
    """
    ETag for the *Damage*
    """
    created_at: datetime | None
    """
    The time the *Damage* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Damage* was last updated (as a ISO-8601 timestamp)
    """


class DamageList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Damage]
    """
    Damage List Response
    """


class DamageShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Damage


class DamageType(Enum):
    special = 'special'
    general = 'general'
    other = 'other'


class DetailTextType(Enum):
    plain_text = 'plain_text'
    rich_text = 'rich_text'


class DiscountBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    rate: float | None
    """
    The rate of the *Discount%*
    """
    type: Type23 | None
    """
    The type of *Discount* being applied in your *Discount* rate.
    """
    note: str | None
    """
    A note for your *Discount*
    """
    early_payment_rate: int | None
    """
    The % discount that will be applied if your *Discount* is paid within the early payment period.
    """
    early_payment_period: int | None
    """
    The number of days for your *Discount* period. If your bill is paid within this time, apply your *Discount* rate to the bill.
    """


class DocumentArchiveBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *DocumentArchive*
    """
    etag: str | None
    """
    ETag for the *DocumentArchive*
    """
    created_at: datetime | None
    """
    The time the *DocumentArchive* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *DocumentArchive* was last updated (as a ISO-8601 timestamp)
    """
    size: int | None
    """
    The size of the DocumentArchive in bytes.
    """
    progress: float | None
    """
    The percent completion of the DocumentArchive.
    """
    state: State | None
    """
    The current state of the DocumentArchive.
    """
    message: str | None
    """
    A message to indicate why the DocumentArchive didn't complete.
    """


class DocumentArchiveShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: DocumentArchive


class DocumentAutomationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *DocumentAutomation*
    """
    etag: str | None
    """
    ETag for the *DocumentAutomation*
    """
    state: State1 | None
    """
    A text description of what the automation is currently doing
    """
    export_formats: ExportFormats | None
    """
    An array of what formats were requested
    """
    filename: str | None
    """
    The name of the file being generated.
    """
    created_at: datetime | None
    """
    The time the *DocumentAutomation* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *DocumentAutomation* was last updated (as a ISO-8601 timestamp)
    """


class DocumentAutomationList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[DocumentAutomation]
    """
    DocumentAutomation List Response
    """


class DocumentAutomationShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: DocumentAutomation


class DocumentBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Document*
    """
    etag: str | None
    """
    ETag for the *Document*
    """
    created_at: datetime | None
    """
    The time the *Document* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Document* was last updated (as a ISO-8601 timestamp)
    """
    deleted_at: datetime | None
    """
    The time the *Document* was deleted (as a ISO-8601 timestamp)
    """
    type: Type | None
    """
    The type of the *Document*
    """
    locked: bool | None
    """
    Whether or not the Document is locked. Locked Document cannot be modified
    """
    name: str | None
    """
    The name of the Document
    """
    received_at: datetime | None
    """
    The time the last document version was received (as an ISO-8601 timestamp)
    """
    filename: str | None
    """
    The uploaded file name of the latest document version.
    """
    size: int | None
    """
    The file size
    """
    content_type: str | None
    """
    The uploaded file content type
    """


class DocumentCategoryBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *DocumentCategory*
    """
    etag: str | None
    """
    ETag for the *DocumentCategory*
    """
    name: str | None
    """
    The name of the *DocumentCategory*
    """
    created_at: datetime | None
    """
    The time the *DocumentCategory* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *DocumentCategory* was last updated (as a ISO-8601 timestamp)
    """


class DocumentCategoryList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[DocumentCategory]
    """
    DocumentCategory List Response
    """


class DocumentCategoryShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: DocumentCategory


class DocumentList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Document]
    """
    Document List Response
    """


class DocumentShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Document


class DocumentTemplateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *DocumentTemplate*
    """
    etag: str | None
    """
    ETag for the *DocumentTemplate*
    """
    size: int | None
    """
    The size in bytes of the template
    """
    content_type: str | None
    """
    A standard MIME type describing the format of the object data.
    """
    filename: str | None
    """
    The name of the original file that was uploaded
    """
    created_at: datetime | None
    """
    The time the *DocumentTemplate* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *DocumentTemplate* was last updated (as a ISO-8601 timestamp)
    """


class DocumentTemplateList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[DocumentTemplate]
    """
    DocumentTemplate List Response
    """


class DocumentTemplateShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: DocumentTemplate


class DocumentVersionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *DocumentVersion*
    """
    document_id: int | None
    """
    The ID of the parent document.
    """
    etag: str | None
    """
    ETag for the *DocumentVersion*
    """
    uuid: str | None
    """
    UUID associated with the DocumentVersion. UUID is required to mark a document fully uploaded.
    """
    created_at: datetime | None
    """
    The time the *DocumentVersion* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *DocumentVersion* was last updated (as a ISO-8601 timestamp)
    """
    filename: str | None
    """
    The uploaded file name of the DocumentVersion.
    """
    size: int | None
    """
    The size of the DocumentVersion in bytes.
    """
    version_number: int | None
    """
    The ordered number of when this DocumentVersion was uploaded.
    """
    content_type: str | None
    """
    A standard MIME type describing the format of the object data.
    """
    received_at: datetime | None
    """
    The time the DocumentVersion was received (as an ISO-8601 timestamp)
    """
    put_url: str | None
    """
    A signed URL for uploading the file in a single operation. It expires in 10 minutes. If the document is fully uploaded, the field is empty.
    """
    fully_uploaded: bool | None
    """
    True if the DocumentVersion is uploaded. False if the DocumentVersion is being uploaded.
    """


class DocumentVersionList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[DocumentVersion]
    """
    DocumentVersion List Response
    """


class EmailAddressBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *EmailAddress*
    """
    etag: str | None
    """
    ETag for the *EmailAddress*
    """
    address: str | None
    """
    The address of the *EmailAddress*
    """
    name: str | None
    """
    A descriptive name for the *EmailAddress. Common values include `Home`, `Work`, and `Other`, as these are the only selectable options within Clio Manage, but other values may be returned for this field.
    """
    primary: bool | None
    """
    Whether it is the default for this contact
    """
    created_at: datetime | None
    """
    The time the *EmailAddress* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *EmailAddress* was last updated (as a ISO-8601 timestamp)
    """


class EmailAddressList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[EmailAddress]
    """
    EmailAddress List Response
    """


class Error(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: ErrorDetail


class ErrorDetail(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: str
    """
    Unique name for this error
    """
    message: str
    """
    Detailed message about the error
    """


class Event1(Enum):
    created = 'created'
    updated = 'updated'
    deleted = 'deleted'
    matter_opened = 'matter_opened'
    matter_pended = 'matter_pended'
    matter_closed = 'matter_closed'


class EventBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Event*
    """
    etag: str | None
    """
    ETag for the *Event*
    """
    message: str | None
    """
    Concise headline message describing the event
    """
    icon: str | None
    """
    Font Awesome icon to display (without the fa- prefix)
    """
    title: str | None
    """
    The title or subject of the event (e.g. Matter Number, Document Title)
    """
    title_url: str | None
    """
    Target URL that will be opened if the user clicks on the event title
    """
    description: str | None
    """
    Description or additional information about the event (e.g. Matter Description)
    """
    description_url: str | None
    """
    Target URL that will be opened if the user clicks on the event description
    """
    primary_detail: str | None
    """
    Optional additional information about the event (e.g. Matter Client, Document Author)
    """
    primary_detail_url: str | None
    """
    Target URL that will be opened if the user clicks on the primary detail
    """
    secondary_detail: str | None
    """
    Optional additional information about the event (e.g. Matter Status, Document Size)
    """
    secondary_detail_url: str | None
    """
    Target URL that will be opened if the user clicks on the secondary detail
    """
    occurred_at: datetime | None
    """
    When the event occurred
    """
    mobile_icon: str | None
    """
    Icon to be displayed in the mobile app
    """
    subject_type: str | None
    """
    The type of subject that triggered the notification (e.g. Matter, Document)
    """
    subject_id: int | None
    """
    Id of the subject that triggered the notification
    """


class EventMetricsBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    unread_mobile_events: int | None
    """
    The number of unread mobile event notifications for the current user
    """
    unread_web_events: int | None
    """
    The number of unread web event notifications for the current user
    """
    unread_secure_messages: int | None
    """
    The number of unread secure messages for the current user
    """
    unread_client_portal_messages: int | None
    """
    The number of unread client portal messages for the current user
    """
    unread_text_messages: int | None
    """
    The number of unread text messages for the current user
    """


class EventMetricsShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: EventMetrics


class EvergreenRetainerBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *EvergreenRetainer*
    """
    created_at: datetime | None
    """
    The time the *EvergreenRetainer* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *EvergreenRetainer* was last updated (as a ISO-8601 timestamp)
    """
    etag: str | None
    """
    ETag for the *EvergreenRetainer*
    """
    minimum_threshold: float | None
    """
    The trust balance threshold for the associated Matter. When the balance falls below the threshold, the retainer's associated recipients (firm users) will receive a notification.
    """


class ExpenseCategoryBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ExpenseCategory*
    """
    etag: str | None
    """
    ETag for the *ExpenseCategory*
    """
    name: str | None
    """
    The name of the expense category
    """
    rate: int | None
    """
    The price charged per unit cost
    """
    entry_type: str | None
    """
    The type of expense entry the category is associated to. Can be either "hard_cost", "soft_cost" or "unassociated"
    """
    created_at: datetime | None
    """
    The time the *ExpenseCategory* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ExpenseCategory* was last updated (as a ISO-8601 timestamp)
    """
    xero_expense_code: str | None
    """
    Custom Xero expense code for an expense category
    """
    accessible_to_user: bool | None
    """
    Determines if expense category is accessible to user
    """
    tax_setting: str | None
    """
    The type of tax rate applied to the expense category.
    """
    currency: dict[str, Any] | None
    """
    The currency details for the expense category
    """


class ExpenseCategoryList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ExpenseCategory]
    """
    ExpenseCategory List Response
    """


class ExpenseCategoryShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ExpenseCategory


class ExportFormats(Enum):
    pdf = 'pdf'
    original = 'original'


class ExternalPropertyBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ExternalProperty*
    """
    etag: str | None
    """
    ETag for the *ExternalProperty*
    """
    name: str | None
    """
    The name of the *ExternalProperty*
    """
    value: str | None
    """
    The value of the *ExternalProperty*
    """
    created_at: datetime | None
    """
    The time the *ExternalProperty* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ExternalProperty* was last updated (as a ISO-8601 timestamp)
    """


class FieldType(Enum):
    checkbox = 'checkbox'
    contact = 'contact'
    currency = 'currency'
    date = 'date'
    time = 'time'
    email = 'email'
    matter = 'matter'
    numeric = 'numeric'
    picklist = 'picklist'
    text_area = 'text_area'
    text_line = 'text_line'
    url = 'url'


class FolderBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Folder*
    """
    etag: str | None
    """
    ETag for the *Folder*
    """
    created_at: datetime | None
    """
    The time the *Folder* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Folder* was last updated (as a ISO-8601 timestamp)
    """
    deleted_at: datetime | None
    """
    The time the *Folder* was deleted (as a ISO-8601 timestamp)
    """
    type: Type1 | None
    """
    The type of the *Folder*
    """
    locked: bool | None
    """
    Whether or not the Folder is locked. Locked Folder cannot be modified
    """
    name: str | None
    """
    The name of the Folder
    """
    root: bool | None
    """
    Whether or not the Folder is the root folder. There is only one root folder per account
    """


class FolderList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Folder]
    """
    Folder List Response
    """


class FolderShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Folder


class Format(Enum):
    csv = 'csv'
    html = 'html'
    json = 'json'
    pdf = 'pdf'
    xlsx = 'xlsx'
    zip = 'zip'


class Frequency(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'


class GrantBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Grant*
    """
    etag: str | None
    """
    ETag for the *Grant*
    """
    name: str | None
    """
    The name of the *Grant*
    """
    funding_code: str | None
    """
    Funding code of the grant
    """
    funding_code_and_name: str | None
    """
    Funding code and name of the grant
    """
    funding_source_name: str | None
    """
    Name of the funding source of the grant
    """
    created_at: datetime | None
    """
    The time the *Grant* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Grant* was last updated (as a ISO-8601 timestamp)
    """
    balance: str | None
    """
    Balance of the grant
    """
    start_date: date_aliased | None
    """
    Start date of the grant
    """
    end_date: date_aliased | None
    """
    End date of the grant
    """


class GrantFundingSourceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *GrantFundingSource*
    """
    etag: str | None
    """
    ETag for the *GrantFundingSource*
    """
    name: str | None
    """
    The name of the *GrantFundingSource*
    """
    created_at: datetime | None
    """
    The time the *GrantFundingSource* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *GrantFundingSource* was last updated (as a ISO-8601 timestamp)
    """


class GrantFundingSourceList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[GrantFundingSource]
    """
    GrantFundingSource List Response
    """


class GrantFundingSourceShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: GrantFundingSource


class GrantList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Grant]
    """
    Grant List Response
    """


class GrantShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Grant


class GroupBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    client_connect_user: bool | None
    """
    Whether or not the Group is a UserGroup for a Clio Connect User
    """
    etag: str | None
    """
    ETag for the *Group*
    """
    id: int | None
    """
    Unique identifier for the *Group*
    """
    name: str | None
    """
    The name of the *Group*
    """
    type: Type10 | None
    """
    The type of the *Group*
    """
    updated_at: datetime | None
    """
    The time the *Group* was last updated (as a ISO-8601 timestamp)
    """


class GroupList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Group]
    """
    Group List Response
    """


class GroupShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Group


class Hierarchy(Enum):
    default = 'Default'
    activity = 'Activity'
    matter = 'Matter'
    client = 'Client'


class IdsResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[int]
    """
    A list of ids
    """


class InstantMessengerBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *InstantMessenger*
    """
    etag: str | None
    """
    ETag for the *InstantMessenger*
    """
    address: str | None
    """
    The address of the *InstantMessenger*
    """
    name: Name1 | None
    """
    The type of *InstantMessenger* it is
    """
    created_at: datetime | None
    """
    The time the *InstantMessenger* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *InstantMessenger* was last updated (as a ISO-8601 timestamp)
    """


class InterestBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    balance: float | None
    """
    Interest balance for the object
    """
    period: int | None
    """
    Number of days that represent the frequency which your *Interest%* will be applied
    """
    rate: float | None
    """
    Rate for the *Interest%*
    """
    total: float | None
    """
    Interest total for the object
    """
    type: Type11 | None
    """
    Type of *Interest%* being applied
    """


class InterestChargeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *InterestCharge*
    """
    etag: str | None
    """
    ETag for the *InterestCharge*
    """
    date: date_aliased | None
    """
    The *InterestCharge* date (as a ISO-8601 date)
    """
    description: str | None
    """
    The description for the *InterestCharge*
    """
    total: float | None
    """
    The total amount for the *InterestCharge*
    """
    created_at: datetime | None
    """
    The time the *InterestCharge* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *InterestCharge* was last updated (as a ISO-8601 timestamp)
    """


class InterestChargeList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[InterestCharge]
    """
    InterestCharge List Response
    """


class ItemBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Item*
    """
    etag: str | None
    """
    ETag for the *Item*
    """
    created_at: datetime | None
    """
    The time the *Item* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Item* was last updated (as a ISO-8601 timestamp)
    """
    deleted_at: datetime | None
    """
    The time the *Item* was deleted (as a ISO-8601 timestamp)
    """
    type: Type2 | None
    """
    The type of the *Item*
    """
    locked: bool | None
    """
    Whether or not the Item is locked. Locked Item cannot be modified
    """
    name: str | None
    """
    The name of the Item
    """


class ItemList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Item]
    """
    Item List Response
    """


class JobTitleBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *JobTitle*
    """
    etag: str | None
    """
    ETag for the *JobTitle*
    """
    name: str | None
    """
    Name of the job title
    """
    initials: str | None
    """
    Initials of the job title
    """


class JurisdictionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Jurisdiction*
    """
    etag: str | None
    """
    ETag for the *Jurisdiction*
    """
    created_at: datetime | None
    """
    The time the *Jurisdiction* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Jurisdiction* was last updated (as a ISO-8601 timestamp)
    """
    system_id: int | None
    """
    Server ID
    """
    description: str | None
    """
    Description
    """
    default: bool | None
    """
    Whether the *Jurisdiction* is default for the current user
    """
    display_timezone: str | None
    """
    Formatted IANA timezone with UTC offset
    """
    valid_subscription: bool | None
    """
    Boolean value for whether the user has the jurisdictions
    """
    is_local_timezone: bool | None
    """
    Boolean value for when the timezone is in the local users timezone
    """


class JurisdictionList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Jurisdiction]
    """
    Jurisdiction List Response
    """


class JurisdictionShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Jurisdiction


class JurisdictionsToTriggerBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *JurisdictionsToTrigger*
    """
    etag: str | None
    """
    ETag for the *JurisdictionsToTrigger*
    """
    system_id: int | None
    """
    Server id
    """
    description: str | None
    """
    A detailed description of the *JurisdictionsToTrigger*
    """
    do_not_recalculate: bool | None
    """
    Whether the associated dates should not be recalculated
    """
    is_served: bool | None
    """
    Whether the user must select a Date Offset (Service Type)
    """
    is_requirements_required: bool | None
    """
    Whether the trigger has requirements
    """
    created_at: datetime | None
    """
    The time the *JurisdictionsToTrigger* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *JurisdictionsToTrigger* was last updated (as a ISO-8601 timestamp)
    """


class JurisdictionsToTriggerList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[JurisdictionsToTrigger]
    """
    JurisdictionsToTrigger List Response
    """


class JurisdictionsToTriggerShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: JurisdictionsToTrigger


class Kind(Enum):
    revenue_kind = 'revenue_kind'
    summary_kind = 'summary_kind'
    trust_kind = 'trust_kind'
    aggregate_all = 'aggregate_all'
    aggregate_split = 'aggregate_split'
    aggregate_services = 'aggregate_services'
    aggregate_expenses = 'aggregate_expenses'


class Kind1(Enum):
    service = 'Service'
    expense = 'Expense'


class Kind2(Enum):
    accounts_receivable = 'accounts_receivable'
    accounts_receivable_aging = 'accounts_receivable_aging'
    bank_account_activity = 'bank_account_activity'
    billing_history = 'billing_history'
    billing_rate = 'billing_rate'
    client_activity = 'client_activity'
    client_ledger = 'client_ledger'
    clio_payments_deposit = 'clio_payments_deposit'
    clio_payments_ledger = 'clio_payments_ledger'
    clio_payments_monthly_statement = 'clio_payments_monthly_statement'
    clio_payments_sales_tax = 'clio_payments_sales_tax'
    clio_payments_transaction = 'clio_payments_transaction'
    contact_information = 'contact_information'
    disbursement_payment = 'disbursement_payment'
    fee_allocation = 'fee_allocation'
    general_ledger = 'general_ledger'
    grant_matters = 'grant_matters'
    invoice_payments_v2 = 'invoice_payments_v2'
    law_society_of_alberta = 'law_society_of_alberta'
    law_society_of_alberta_al = 'law_society_of_alberta_al'
    law_society_of_alberta_bar = 'law_society_of_alberta_bar'
    law_society_of_alberta_tl = 'law_society_of_alberta_tl'
    law_society_of_alberta_tt = 'law_society_of_alberta_tt'
    matter = 'matter'
    matter_balance_summary = 'matter_balance_summary'
    matter_productivity_by_user = 'matter_productivity_by_user'
    matters_by_responsible_attorney = 'matters_by_responsible_attorney'
    originating_attorney_revenue = 'originating_attorney_revenue'
    other_revenue = 'other_revenue'
    productivity_by_client = 'productivity_by_client'
    productivity_by_user = 'productivity_by_user'
    revenue = 'revenue'
    task_productivity_by_user = 'task_productivity_by_user'
    task_progress_by_user = 'task_progress_by_user'
    trust_ledger = 'trust_ledger'
    trust_ledger_nsw = 'trust_ledger_nsw'
    trust_listing = 'trust_listing'
    trust_management = 'trust_management'
    work_in_progress = 'work_in_progress'


class LaukCivilCertificatedRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *LaukCivilCertificatedRate*
    """
    activity: str | None
    """
    Activity of the *LaukCivilCertificatedRate*
    """
    activity_sub_category: str | None
    """
    Activity sub-category
    """
    activity_type: str | None
    """
    Activity type
    """
    attended_several_hearings_for_multiple_clients: bool | None
    """
    Multiple hearings for multiple clients indicator
    """
    category_of_law: str | None
    """
    Category of law
    """
    created_at: datetime | None
    """
    The time the *LaukCivilCertificatedRate* was created (as a ISO-8601 timestamp)
    """
    change_of_solicitor: bool | None
    """
    Change of solicitor indicator
    """
    court: str | None
    """
    Court associated
    """
    eligible_for_sqm: bool | None
    """
    SQM eligibility (Legal Aid England and Wales)
    """
    exceptional: Decimal | None
    """
    Fee applied for high activity count
    """
    exceptional_warning: str | None
    """
    Warning for exceptional status
    """
    etag: str | None
    """
    ETag for the *LaukCivilCertificatedRate*
    """
    fee: Decimal | None
    """
    Fee amount
    """
    fee_scheme: str | None
    """
    Fee scheme
    """
    first_conducting_solicitor: bool | None
    """
    First conducting solicitor indicator
    """
    key: str | None
    """
    Unique key
    """
    number_of_clients: str | None
    """
    Number of clients
    """
    party: str | None
    """
    Associated party
    """
    post_transfer_clients_represented: str | None
    """
    Post-transfer clients represented
    """
    rate_type: str | None
    """
    Rate type
    """
    region: str | None
    """
    Region
    """
    session_type: str | None
    """
    Session type
    """
    user_type: str | None
    """
    User type
    """
    updated_at: datetime | None
    """
    The time the *LaukCivilCertificatedRate* was last updated (as a ISO-8601 timestamp)
    """


class LaukCivilCertificatedRateList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LaukCivilCertificatedRate]
    """
    LaukCivilCertificatedRate List Response
    """


class LaukCivilControlledRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *LaukCivilControlledRate*
    """
    activity: str | None
    """
    Activity of the *LaukCivilControlledRate*
    """
    activity_type: str | None
    """
    Activity type
    """
    category_of_law: str | None
    """
    Category of law
    """
    created_at: datetime | None
    """
    The time the *LaukCivilControlledRate* was created (as a ISO-8601 timestamp)
    """
    etag: str | None
    """
    ETag for the *LaukCivilControlledRate*
    """
    exceptional: Decimal | None
    """
    Fee applied for high activity count
    """
    fee: Decimal | None
    """
    Fee amount
    """
    fee_scheme: str | None
    """
    Fee scheme
    """
    key: str | None
    """
    Unique key
    """
    rate_type: str | None
    """
    Rate type
    """
    region: str | None
    """
    Region
    """
    updated_at: datetime | None
    """
    The time the *LaukCivilControlledRate* was last updated (as a ISO-8601 timestamp)
    """


class LaukCivilControlledRateList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LaukCivilControlledRate]
    """
    LaukCivilControlledRate List Response
    """


class LaukCriminalControlledRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *LaukCriminalControlledRate*
    """
    activity: str | None
    """
    Activity of the *LaukCriminalControlledRate*
    """
    activity_type: str | None
    """
    Activity type
    """
    category_of_law: str | None
    """
    Category of law
    """
    counsel: str | None
    """
    Associated counsel
    """
    court: str | None
    """
    Court associated
    """
    created_at: datetime | None
    """
    The time the *LaukCriminalControlledRate* was created (as a ISO-8601 timestamp)
    """
    etag: str | None
    """
    ETag for the *LaukCriminalControlledRate*
    """
    exceptional: Decimal | None
    """
    Fee applied for high activity count
    """
    fee: Decimal | None
    """
    Fee amount
    """
    fee_scheme: str | None
    """
    Fee scheme
    """
    post_nov_24_exceptional: Decimal | None
    """
    Post-Nov 24 exceptional fee
    """
    post_nov_24_fee: Decimal | None
    """
    Post-Nov 24 fee amount
    """
    post_sept_22_exceptional: Decimal | None
    """
    Post-Sept 22 exceptional fee
    """
    post_sept_22_fee: Decimal | None
    """
    Post-Sept 22 fee amount
    """
    key: str | None
    """
    Unique key
    """
    rate_type: str | None
    """
    Rate type
    """
    region: str | None
    """
    Region
    """
    solicitor_type: str | None
    """
    Solicitor type
    """
    updated_at: datetime | None
    """
    The time the *LaukCriminalControlledRate* was last updated (as a ISO-8601 timestamp)
    """


class LaukCriminalControlledRateList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LaukCriminalControlledRate]
    """
    LaukCriminalControlledRate List Response
    """


class LaukExpenseCategoryBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    certificated: bool | None
    """
    Certificated boolean identifier for expense
    """
    civil: bool | None
    """
    Civil boolean identifier for expense
    """
    created_at: datetime | None
    """
    The time the *LaukExpenseCategory* was created (as a ISO-8601 timestamp)
    """
    criminal: bool | None
    """
    Criminal boolean identifier for expense
    """
    etag: str | None
    """
    ETag for the *LaukExpenseCategory*
    """
    id: int | None
    """
    Unique identifier for the *LaukExpenseCategory*
    """
    key: str | None
    """
    Unique key
    """
    name: str | None
    """
    Expense name
    """
    rate: Decimal | None
    """
    Determines rate based on region param
    """
    updated_at: datetime | None
    """
    The time the *LaukExpenseCategory* was last updated (as a ISO-8601 timestamp)
    """


class LaukExpenseCategoryList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LaukExpenseCategory]
    """
    LaukExpenseCategory List Response
    """


class LegalAidUkActivityBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    activity_sub_category: str | None
    """
    Activity sub-category
    """
    advocacy: int | None
    """
    Advocacy
    """
    base_rate: float | None
    """
    Base rate
    """
    bolt_ons: str | None
    """
    Bolt ons
    """
    bolt_ons_summary: str | None
    """
    Bolt ons summary
    """
    court: int | None
    """
    Court
    """
    eligible_for_sqm: bool | None
    """
    Eligible for SQM
    """
    expert: int | None
    """
    Expert
    """
    form_of_civil_legal_service: int | None
    """
    Form of civil legal service
    """
    id: int | None
    """
    Unique identifier for the *LegalAidUkActivity*
    """
    is_custom_rate: bool | None
    """
    Flag to indicate if rate was manually entered by user
    """
    json_key: str | None
    """
    Lookup key that references JSON data
    """
    region: int | None
    """
    Region
    """
    tax_exclusive: bool | None
    """
    Flag to indicate if tax is exclusive
    """
    uplift: float | None
    """
    Uplift percentage applied to activity rate
    """
    user_type: int | None
    """
    User type
    """


class LegalAidUkBillBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    additional_travel_payment: bool | None
    """
    Additional travel payment, for Legal Aid England and Wales
    """
    adjourned_hearing_fee: str | None
    """
    Adjourned hearing fee
    """
    advocacy_costs: float | None
    """
    Advocacy costs
    """
    advice_time: int | None
    """
    Advice time
    """
    bill_type: int | None
    """
    Bill type
    """
    case_concluded: date_aliased | None
    """
    Case concluded
    """
    case_stage_level: int | None
    """
    Case stage level
    """
    cla_exemption_code: str | None
    """
    CLA exemption code
    """
    cla_reference: str | None
    """
    CLA reference
    """
    cmrh_oral: int | None
    """
    CMRH oral
    """
    cmrh_telephone: int | None
    """
    CMRH telephone
    """
    cost_of_counsel: str | None
    """
    Cost of counsel
    """
    costs_are_those_of: int | None
    """
    Costs are those of
    """
    court_location: str | None
    """
    Court location (HPCDS matters)
    """
    date_of_claim: date_aliased | None
    """
    Date of claim
    """
    designated_accredited_representative: int | None
    """
    Designated accredited representative
    """
    detention_travel_and_waiting_costs: str | None
    """
    Detention travel & waiting costs ex VAT
    """
    disbursements_vat: float | None
    """
    Disbursements VAT
    """
    exceptional_case_funding_reference: str | None
    """
    Exceptional case funding reference
    """
    exemption_criteria_satisfied: int | None
    """
    Exemption criteria satisfied
    """
    follow_on_work: int | None
    """
    Follow on work
    """
    ho_interview: int | None
    """
    HO interview
    """
    ho_ucn: int | None
    """
    HO UCN
    """
    id: int | None
    """
    Unique identifier for the *LegalAidUkBill*
    """
    independent_medical_reports_claimed: str | None
    """
    Independent medical reports claimed
    """
    jr_form_filling: str | None
    """
    JR/Form filling ex VAT, for Legal Aid England and Wales
    """
    maat_id: str | None
    """
    MAAT ID
    """
    meetings_attended: int | None
    """
    Meetings attended
    """
    mht_ref_no: str | None
    """
    MHT reference number
    """
    net_disbursements: float | None
    """
    Net disbursements
    """
    net_profit_costs: float | None
    """
    Net profit cost
    """
    niat_disbursement_prior_authority_number: str | None
    """
    NIAT disbursement prior authority number
    """
    number_of_attendances: int | None
    """
    Number of attendances
    """
    outcome_for_the_client: int | None
    """
    Outcome for the client
    """
    profit_costs_ex_vat: int | None
    """
    Profit costs ex VAT
    """
    prior_authority_reference: str | None
    """
    Prior authority reference number
    """
    representation_order_date: date_aliased | None
    """
    Representation order date
    """
    stage_reached: int | None
    """
    Stage reached
    """
    substantive_hearing: int | None
    """
    Substantive hearing
    """
    travel_and_waiting_costs: float | None
    """
    Travel & waiting costs
    """
    travel_time: int | None
    """
    Travel time
    """
    value_of_costs: str | None
    """
    Value of costs
    """
    waiting_time: int | None
    """
    Waiting time
    """


class LegalAidUkContactBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *LegalAidUkContact*
    """
    disability: int | None
    """
    The disability of the LegalAidUkContact
    """
    disability_code: str | None
    """
    The disability code of the LegalAidUkContact
    """
    ethnicity: int | None
    """
    The ethnicity of the LegalAidUkContact
    """
    ethnicity_title: str | None
    """
    The ethnicity title of the LegalAidUkContact
    """
    financially_eligible: bool | None
    """
    The financial eligibility of the LegalAidUkContact
    """
    gender: int | None
    """
    The gender of the LegalAidUkContact
    """
    gender_title: str | None
    """
    The gender title of the LegalAidUkContact
    """
    national_insurance_number: str | None
    """
    National Insurance Number
    """


class LegalAidUkMatterBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    access_point: str | None
    """
    Access point
    """
    laa_office_number: str | None
    """
    LAA office number
    """
    ait_hearing_centre: int | None
    """
    AIT hearing centre
    """
    attended_several_hearings_acting_for_multiple_clients: bool | None
    """
    Attended several hearings acting for multiple clients
    """
    bill_ho_ucn: str | None
    """
    Bill HO UCN
    """
    bill_number_of_attendances: int | None
    """
    Bill number of attendances
    """
    bill_outcome_for_the_client_code: int | None
    """
    Bill outcome for the client code
    """
    bill_stage_reached_code: int | None
    """
    Bill stage reached code
    """
    case_reference: str | None
    """
    Case reference
    """
    case_start_date: date_aliased | None
    """
    Case start date
    """
    category: int | None
    """
    Category
    """
    category_as_string: str | None
    """
    Category as string
    """
    certificate_effective_date: date_aliased | None
    """
    Certificate effective date
    """
    certificate_expiration_date: date_aliased | None
    """
    Certificate expiration date
    """
    certificate_number: str | None
    """
    Certificate number
    """
    certificate_scope: str | None
    """
    Certificate scope
    """
    certification_type: int | None
    """
    Certification type
    """
    change_of_solicitor: bool | None
    """
    Change of solicitor
    """
    client_equal_opportunity_monitoring: str | None
    """
    Client equal opportunity monitoring
    """
    client_type: int | None
    """
    Client type
    """
    clr_start_date: date_aliased | None
    """
    CLR start date
    """
    clr_total_profit_costs: str | None
    """
    CLR total profit costs
    """
    cost_limit: str | None
    """
    Cost limit
    """
    counsel: int | None
    """
    Counsel
    """
    court: int | None
    """
    Court
    """
    court_id: int | None
    """
    Court ID
    """
    court_id_code: str | None
    """
    Court ID code
    """
    created_at: datetime | None
    """
    The time the *LegalAidUkMatter* was created (as a ISO-8601 timestamp)
    """
    delivery_location: str | None
    """
    Delivery location
    """
    dscc_number: str | None
    """
    DSCC number
    """
    duty_solicitor: bool | None
    """
    Duty solicitor
    """
    etag: str | None
    """
    ETag for the *LegalAidUkMatter*
    """
    exceptional_case_funding_reference: str | None
    """
    Exceptional case funding reference
    """
    expense_limit: str | None
    """
    Expense limit
    """
    fee_scheme: int | None
    """
    Fee scheme
    """
    first_conducting_solicitor: bool | None
    """
    First conducting solicitor
    """
    id: int | None
    """
    Unique identifier for the *LegalAidUkMatter*
    """
    irc_surgery: str | None
    """
    Irc surgery
    """
    legacy_case: str | None
    """
    Legacy case
    """
    legal_representation_number: str | None
    """
    Legal representation number
    """
    lh_total_disbursements: str | None
    """
    LH total disbursements
    """
    lh_start_date: str | None
    """
    LH start date
    """
    lh_total_profit_costs: str | None
    """
    LH total profit costs
    """
    linked_matter_id: int | None
    """
    Linked matter ID
    """
    local_authority_number: str | None
    """
    Local authority number
    """
    maat_id: str | None
    """
    MAAT ID
    """
    matter_type: int | None
    """
    Matter type
    """
    matter_type_code: str | None
    """
    Matter type code
    """
    matter_type_1: int | None
    """
    Matter type 1
    """
    matter_type_1_code: str | None
    """
    Matter type 1 code
    """
    matter_type_1_title: str | None
    """
    Matter type 1 title
    """
    matter_type_2: int | None
    """
    Matter type 2
    """
    matter_type_2_code: str | None
    """
    Matter type 2 code
    """
    matter_type_2_title: str | None
    """
    Matter type 2 title
    """
    matter_types_combined: str | None
    """
    Matter types combined
    """
    number_of_clients_seen_at_surgery: int | None
    """
    Number of clients seen at surgery
    """
    number_of_clients: int | None
    """
    Number of clients
    """
    party: int | None
    """
    Party
    """
    police_station: str | None
    """
    Police station
    """
    post_transfer_clients_represented: int | None
    """
    Post transfer clients represented
    """
    postal_application_accepted: str | None
    """
    Postal application accepted
    """
    prior_authority_reference: str | None
    """
    Priory authority reference
    """
    prison_id: int | None
    """
    Prison ID
    """
    prison_law_prior_approval_number: str | None
    """
    Prison law prior approval number
    """
    procurement_area: str | None
    """
    Procurement area
    """
    region: int | None
    """
    Region
    """
    related_claims_number: str | None
    """
    Related claims number
    """
    representation_order_date: date_aliased | None
    """
    Representation order date
    """
    schedule_reference_number: str | None
    """
    Schedule reference number
    """
    scheme_id: str | None
    """
    Scheme ID
    """
    session_type: int | None
    """
    Session type
    """
    solicitor_type: int | None
    """
    Solicitor type
    """
    standard_fee_category: int | None
    """
    Standard fee category
    """
    surgery_clients_resulting_in_a_legal_help_matter_opened: int | None
    """
    Surgery clients resulting in a legal help matter opened
    """
    surgery_clients: int | None
    """
    Surgery clients
    """
    surgery_date: date_aliased | None
    """
    Surgery date
    """
    transfer_date: date_aliased | None
    """
    Transfer date
    """
    type_of_advice: int | None
    """
    Type of advice
    """
    type_of_service: str | None
    """
    Type of service
    """
    ucn: str | None
    """
    UCN
    """
    ufn: str | None
    """
    UFN
    """
    undesignated_area_court: bool | None
    """
    Undesignated area court
    """
    updated_at: datetime | None
    """
    The time the *LegalAidUkMatter* was last updated (as a ISO-8601 timestamp)
    """
    user_type: int | None
    """
    User type
    """
    youth_court: bool | None
    """
    Youth court
    """


class LienBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Lien*
    """
    amount: float | None
    """
    The amount for Lien
    """
    description: str | None
    """
    Lien description
    """
    etag: str | None
    """
    ETag for the *Lien*
    """
    lien_type: LienType | None
    """
    Lien type
    """
    mark_as_lien: bool | None
    """
    Mark item as Lien
    """
    created_at: datetime | None
    """
    The time the *Lien* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Lien* was last updated (as a ISO-8601 timestamp)
    """


class LienType(Enum):
    general = 'general'
    medical_payer = 'medical_payer'
    medical_provider = 'medical_provider'


class LightColor(Enum):
    field_5_da5_c7 = '#5DA5C7'
    f95957 = '#F95957'
    field_209412 = '#209412'
    ff7715 = '#FF7715'
    de649_d = '#DE649D'
    ff6_b02 = '#FF6B02'
    field_56_c4_fc = '#56C4FC'
    field_00_b177 = '#00B177'
    field_50_d19_b = '#50D19B'
    f14_a8_c = '#F14A8C'
    a3_a2_a2 = '#A3A2A2'
    field_84_ab3_b = '#84AB3B'
    b091_ee = '#B091EE'
    bd9_e69 = '#BD9E69'
    f2_a000 = '#F2A000'
    field_00_a5_ca = '#00A5CA'
    cb5_a3_d = '#CB5A3D'
    field_959_cd0 = '#959CD0'
    b0_b0_b0 = '#B0B0B0'
    field_7_ba6_cd = '#7BA6CD'


class LineItemBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *LineItem*
    """
    etag: str | None
    """
    ETag for the *LineItem*
    """
    type: Type12 | None
    """
    The type of the *LineItem*
    """
    description: str | None
    """
    The description for the *LineItem*
    """
    date: date_aliased | None
    """
    The *LineItem* date (as a ISO-8601 date)
    """
    price: float | None
    """
    The price of the *LineItem*
    """
    taxable: bool | None
    """
    Whether the *LineItem* is taxable
    """
    kind: Kind1 | None
    """
    The kind of *LineItem*
    """
    note: str | None
    """
    The note attached to the *LineItem*
    """
    secondary_taxable: bool | None
    """
    Whether the *LineItem* is secondary taxable
    """
    total: float | None
    """
    The total amount for the *LineItem*
    """
    tax: float | None
    """
    The tax amount for the *LineItem*
    """
    secondary_tax: float | None
    """
    The secondary tax amount for the *LineItem*
    """
    sub_total: float | None
    """
    The subtotal amount for the *LineItem*
    """
    quantity: float | None
    """
    The amount of hours for the *LineItem*
    """
    group_ordering: int | None
    """
    The value to specify the ordering of the *LineItem* on a bill
    """
    created_at: datetime | None
    """
    The time the *LineItem* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *LineItem* was last updated (as a ISO-8601 timestamp)
    """


class LineItemList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LineItem]
    """
    LineItem List Response
    """


class LineItemShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: LineItem


class LineItemTotalsBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    quantity: float | None
    """
    Sum of quantity for included line items.
    """
    price: float | None
    """
    Sum of price for included line items.
    """
    discount_percent: float | None
    """
    Sum of discount as percentage for included line items.
    """
    total: float | None
    """
    Sum of total for included line items.
    """
    sub_total: float | None
    """
    Sum of total before discount and tax is applied.
    """


class LinkedFolderBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Folder*
    """
    etag: str | None
    """
    ETag for the *Folder*
    """
    created_at: datetime | None
    """
    The time the *Folder* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Folder* was last updated (as a ISO-8601 timestamp)
    """
    deleted_at: datetime | None
    """
    The time the *Folder* was deleted (as a ISO-8601 timestamp)
    """
    type: Type1 | None
    """
    The type of the *Folder*
    """
    locked: bool | None
    """
    Whether or not the Folder is locked. Locked Folder cannot be modified
    """
    name: str | None
    """
    The name of the *Folder*
    """
    root: bool | None
    """
    Whether or not the Folder is the root folder. There is only one root folder per account
    """


class LogEntryBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *LogEntry*
    """
    etag: str | None
    """
    ETag for the *LogEntry*
    """
    type: Type13 | None
    """
    The type of the *LogEntry*
    """
    accessed_at: datetime | None
    """
    The time the item was last accessed (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *LogEntry* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *LogEntry* was last updated (as a ISO-8601 timestamp)
    """


class LogEntryList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LogEntry]
    """
    LogEntry List Response
    """


class MatterBalanceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MatterBalance*
    """
    amount: float | None
    """
    The amount of balance of a matter.
    """


class MatterBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Matter*
    """
    etag: str | None
    """
    ETag for the *Matter*
    """
    number: int | None
    """
    The number given to the *Matter* within an account
    """
    display_number: str | None
    """
    The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.
    """
    custom_number: str | None
    """
    User defined custom number of the *Matter*
    """
    currency: dict[str, Any] | None
    """
    Currency of the matter
    """
    description: str | None
    """
    The detailed description of the *Matter*
    """
    status: Status | None
    """
    The current status of the *Matter*
    """
    location: str | None
    """
    The location of the *Matter*
    """
    client_reference: str | None
    """
    Client Reference string for external uses
    """
    client_id: int | None
    """
    Client ID
    """
    billable: bool | None
    """
    Whether this matter is billable
    """
    maildrop_address: str | None
    """
    A unique Maildrop email address for the matter
    """
    billing_method: BillingMethod | None
    """
    Billing method of this matter
    """
    open_date: date_aliased | None
    """
    The date the matter was set to open (as a ISO-8601 date)
    """
    close_date: date_aliased | None
    """
    The date the matter was set to closed (as a ISO-8601 date)
    """
    pending_date: date_aliased | None
    """
    The date the matter was set to pending (as a ISO-8601 date)
    """
    created_at: datetime | None
    """
    The time the *Matter* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Matter* was last updated (as a ISO-8601 timestamp)
    """
    shared: bool | None
    """
    Whether the matter is currently shared with Clio Connect
    """
    has_tasks: bool | None
    """
    Whether or not the matter has any tasks.
    """
    last_activity_date: date_aliased | None
    """
    The greatest date out of all of the activities on the matter (as a ISO-8601 date)
    """
    matter_stage_updated_at: datetime | None
    """
    The date the matter stage was last updated (as a ISO-8601 date)
    """


class MatterBillRecipientBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_at: datetime | None
    """
    The time the *MatterBillRecipient* was created (as a ISO-8601 timestamp)
    """
    etag: str | None
    """
    ETag for the *MatterBillRecipient*
    """
    id: int | None
    """
    Unique identifier for the *MatterBillRecipient*
    """
    updated_at: datetime | None
    """
    The time the *MatterBillRecipient* was last updated (as a ISO-8601 timestamp)
    """


class MatterBudgetBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MatterBudget*
    """
    etag: str | None
    """
    ETag for the *MatterBudget*
    """
    budget: float | None
    """
    The amount allocated for the matter.
    """
    include_expenses: bool | None
    """
    Whether the budget includes expenses.
    """
    notification_threshold: int | None
    """
    Percentage of the budget when it starts notifying users. The number must be between 0 and 100.
    """
    notify_users: bool | None
    """
    Whether to notify users when the matter reaches the notification threshold.
    """
    created_at: datetime | None
    """
    The time the *MatterBudget* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *MatterBudget* was last updated (as a ISO-8601 timestamp)
    """


class MatterContactsBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_created_at: datetime | None
    """
    Timestamp of the time the contact was created
    """
    contact_updated_at: datetime | None
    """
    Timestamp of the time the contact was created
    """
    created_at: datetime | None
    """
    The time the *MatterContacts* was created (as a ISO-8601 timestamp)
    """
    description: str | None
    """
    Description of the matter
    """
    etag: str | None
    """
    ETag for the *MatterContacts*
    """
    first_name: str | None
    """
    First name of the Person
    """
    id: int | None
    """
    Unique identifier for the *MatterContacts*
    """
    initials: str | None
    """
    The initials of the *MatterContacts*
    """
    is_client: bool | None
    """
    Whether or not the MatterContacts is a client
    """
    last_name: str | None
    """
    Last name of the Person
    """
    matter_id: int | None
    """
    ID of the matter
    """
    matter_number: str | None
    """
    Number of the matter
    """
    middle_name: str | None
    """
    Middle name of the Person
    """
    name: str | None
    """
    The full name of the *MatterContacts*
    """
    prefix: str | None
    """
    The prefix of the *MatterContacts* (Mr, Mrs, etc)
    """
    primary_email_address: str | None
    """
    The primary email address associated with this *MatterContacts*.
    """
    primary_phone_number: str | None
    """
    The primary phone number associated with this *MatterContacts*.
    """
    relationship_name: str | None
    """
    The description of the relation between the contact and the matter, or "Client" if the user is the client.
    """
    secondary_email_address: str | None
    """
    The secondary email address of the contact
    """
    secondary_phone_number: str | None
    """
    The secondary phone number of the contact
    """
    title: str | None
    """
    The designated title of the *MatterContacts*
    """
    type: Type9 | None
    """
    The type of the *MatterContacts*
    """
    updated_at: datetime | None
    """
    The time the *MatterContacts* was last updated (as a ISO-8601 timestamp)
    """
    client_connect_user_id: int | None
    """
    The client connect ID of the contacts associated user
    """


class MatterContactsList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MatterContacts]
    """
    MatterContacts List Response
    """


class MatterCustomRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: Type24 | None
    """
    The type of the *MatterCustomRate*
    """
    on_invoice: bool | None
    """
    Specifies if the matter's associated activity is posted or on a bill.
    """


class MatterDocketBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MatterDocket*
    """
    etag: str | None
    """
    ETag for the *MatterDocket*
    """
    name: str | None
    """
    The name of the *MatterDocket*
    """
    start_date: date_aliased | None
    """
    The date the *MatterDocket* will start (as a ISO-8601 date)
    """
    start_time: datetime | None
    """
    The time the *MatterDocket* will start, required for specific triggers (as a ISO-8601 timestamp)
    """
    status: str | None
    """
    The status of the *MatterDocket* creation
    """
    created_at: datetime | None
    """
    The time the *MatterDocket* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *MatterDocket* was last updated (as a ISO-8601 timestamp)
    """
    deleted_at: datetime | None
    """
    The time the *MatterDocket* was deleted (as a ISO-8601 timestamp)
    """


class MatterDocketList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MatterDocket]
    """
    MatterDocket List Response
    """


class MatterDocketShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: MatterDocket


class MatterList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Matter]
    """
    Matter List Response
    """


class MatterShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Matter


class MatterStageBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MatterStage*
    """
    etag: str | None
    """
    ETag for the *MatterStage*
    """
    practice_area_id: str | None
    """
    Practice Area ID
    """
    name: str | None
    """
    The name of the *MatterStage*
    """
    order: int | None
    """
    The order of the matter stage within a practice area
    """
    created_at: datetime | None
    """
    The time the *MatterStage* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *MatterStage* was last updated (as a ISO-8601 timestamp)
    """


class MatterStageList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MatterStage]
    """
    MatterStage List Response
    """


class MedicalBillBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MedicalBill*
    """
    adjustment: float | None
    """
    Adjustment for Medical Bill
    """
    amount: float | None
    """
    Amount for Medical Bill
    """
    bill_date: date_aliased | None
    """
    Bill date for Medical Bill (as a ISO-8601 date)
    """
    bill_received_date: date_aliased | None
    """
    Bill received date for Medical Bill (as a ISO-8601 date)
    """
    damage_type: str | None
    """
    Damage Type
    """
    document_id: int | None
    """
    The id of the document associated with the Medical Bill
    """
    etag: str | None
    """
    ETag for the *MedicalBill*
    """
    name: str | None
    """
    Name of the Medical Bill
    """
    created_at: datetime | None
    """
    The time the *MedicalBill* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *MedicalBill* was last updated (as a ISO-8601 timestamp)
    """


class MedicalBillShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: MedicalBill


class MedicalRecordBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MedicalRecord*
    """
    document_id: int | None
    """
    The id of the document associated with the Medical Record
    """
    etag: str | None
    """
    ETag for the *MedicalRecord*
    """
    end_date: datetime | None
    """
    End date for *MedicalRecord* (as a ISO-8601 date)
    """
    start_date: datetime | None
    """
    Start date for *MedicalRecord* (as a ISO-8601 date)
    """
    created_at: datetime | None
    """
    The time the *MedicalRecord* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *MedicalRecord* was last updated (as a ISO-8601 timestamp)
    """


class MedicalRecordShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: MedicalRecord


class MedicalRecordsRequestBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *MedicalRecordsRequest*
    """
    etag: str | None
    """
    ETag for the *MedicalRecordsRequest*
    """
    bills_follow_up_date: datetime | None
    """
    Follow up date for Medical Bills (as a ISO-8601 date)
    """
    bills_request_date: datetime | None
    """
    Date for when the Medical Bills were requested (as a ISO-8601 date)
    """
    bills_status: BillsStatus | None
    """
    Medical Bills status
    """
    description: str | None
    """
    Description of the Medical Records Detail
    """
    in_treatment: bool | None
    """
    Treatment status for Medical Records Detail
    """
    records_follow_up_date: datetime | None
    """
    Follow up date for Medical Records (as a ISO-8601 date)
    """
    records_request_date: datetime | None
    """
    Date for when the Medical Records were requested (as a ISO-8601 date)
    """
    records_status: BillsStatus | None
    """
    Medical Records status
    """
    treatment_end_date: datetime | None
    """
    Treatment end date for Medical Records Detail (as a ISO-8601 date)
    """
    treatment_start_date: datetime | None
    """
    Treatment start date for Medical Records Detail (as a ISO-8601 date)
    """
    created_at: datetime | None
    """
    The time the *MedicalRecordsRequest* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *MedicalRecordsRequest* was last updated (as a ISO-8601 timestamp)
    """


class MedicalRecordsRequestList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MedicalRecordsRequest]
    """
    MedicalRecordsRequest List Response
    """


class MedicalRecordsRequestShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: MedicalRecordsRequest


class Model(Enum):
    activity = 'activity'
    bill = 'bill'
    calendar_entry = 'calendar_entry'
    clio_payments_payment = 'clio_payments_payment'
    communication = 'communication'
    contact = 'contact'
    document = 'document'
    folder = 'folder'
    matter = 'matter'
    task = 'task'


class MultipartBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    part_number: int | None
    """
    Unique identifier of a part which defines its position within the document being uploaded.
    """
    put_url: str | None
    """
    A signed URL for uploading the file part. It expires in 10 minutes.
    """


class MultipartHeaderBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None
    """
    Required HTTP header field name for uploading.
    """
    value: str | None
    """
    Required HTTP header field value for uploading.
    """


class MyEventBase(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class MyEventList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MyEvent]
    """
    MyEvent List Response
    """


class MyEventShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: MyEvent


class Name(Enum):
    work = 'Work'
    home = 'Home'
    billing = 'Billing'
    other = 'Other'


class Name1(Enum):
    work = 'Work'
    personal = 'Personal'
    other = 'Other'


class Name3(Enum):
    work = 'Work'
    personal = 'Personal'
    twitter = 'Twitter'
    facebook = 'Facebook'
    linked_in = 'LinkedIn'
    instant_messenger = 'Instant Messenger'
    other = 'Other'


class NoteBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Note*
    """
    etag: str | None
    """
    ETag for the *Note*
    """
    type: Type17 | None
    """
    The type of the *Note*
    """
    subject: str | None
    """
    The subject of the *Note*
    """
    detail: str | None
    """
    The text body of the *Note*. This Note supports rich text when setting the field `detail_text_type` to `rich_text`. With supported tags such as `<a>`, `<b>`, `<br>`, `<div>`, `<em>`, `<i>` `<li>`, `<ol>`, `<p>`, `<s>`, `<strong>`, `<u>` and `<ul>`. This Note also supports attributes such as `href`, `rel`, `type`, and `target`.
    """
    detail_text_type: DetailTextType | None
    """
    The text type of the *Note*
    """
    date: date_aliased | None
    """
    The date the *Note* is for (as a ISO-8601 date)
    """
    created_at: datetime | None
    """
    The time the *Note* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Note* was last updated (as a ISO-8601 timestamp)
    """
    time_entries_count: int | None
    """
    The number of time_entries associated with the *Note*
    """


class NoteList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Note]
    """
    Note List Response
    """


class NoteShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Note


class NotificationEventSubscriberBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *NotificationEventSubscriber*
    """
    etag: str | None
    """
    ETag for the *NotificationEventSubscriber*
    """
    user_id: int | None
    """
    The unique identifier for a User added as a notification event subscriber to the NotificationEventSubscriber
    """
    name: str | None
    """
    The User name added as a notification event subscriber to the NotificationEventSubscriber
    """
    created_at: datetime | None
    """
    The time the *NotificationEventSubscriber* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *NotificationEventSubscriber* was last updated (as a ISO-8601 timestamp)
    """


class NotificationMethodBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *NotificationMethod*
    """
    etag: str | None
    """
    ETag for the *NotificationMethod*
    """
    type: Type25 | None
    """
    Human readable description of the type of notification
    """
    email_address: str | None
    """
    Email address to send the notification to (only for email type)
    """
    is_default_email_address: bool | None
    """
    A boolean that is returned only on notification method objects that are relevant e.g. Email notification or Alternative Email
    """
    created_at: datetime | None
    """
    The time the *NotificationMethod* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *NotificationMethod* was last updated (as a ISO-8601 timestamp)
    """


class NotificationType(Enum):
    email = 'Email'
    popup = 'Popup'


class OutstandingClientBalanceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    associated_matter_ids: list[int] | None
    """
    An array of Matter IDs associated with bills in the unpaid state
    """
    etag: str | None
    """
    ETag for the *OutstandingClientBalance*
    """
    id: int | None
    """
    Unique identifier for the *OutstandingClientBalance*
    """
    last_payment_date: date_aliased | None
    """
    The date the most recent payment from the contact was received
    """
    last_shared_date: date_aliased | None
    """
    The date of the most recently shared bills through the outstanding balance table
    """
    newest_issued_bill_due_date: date_aliased | None
    """
    The due date of the contact's newest bill
    """
    pending_payments_total: float | None
    """
    The sum of all online payments in a pending state on the outstanding bills
    """
    reminders_enabled: bool | None
    """
    The status of automated reminders for this client
    """
    total_outstanding_balance: float | None
    """
    The sum of all bills in the unpaid state
    """
    created_at: datetime | None
    """
    The time the *OutstandingClientBalance* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *OutstandingClientBalance* was last updated (as a ISO-8601 timestamp)
    """


class OutstandingClientBalanceList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[OutstandingClientBalance]
    """
    OutstandingClientBalance List Response
    """


class ParentType(Enum):
    contact = 'Contact'
    matter = 'Matter'


class ParticipantBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Participant*
    """
    etag: str | None
    """
    ETag for the *Participant*
    """
    created_at: datetime | None
    """
    The time the *Participant* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Participant* was last updated (as a ISO-8601 timestamp)
    """
    type: Type26 | None
    """
    The type of the Participant. Person and Company are subtypes of Contact
    """
    identifier: str | None
    """
    A string to identify the *Participant*
    """
    secondary_identifier: str | None
    """
    A secondary string to identify the *Participant*
    """
    enabled: bool | None
    """
    The enabled state of the *Participant* record. Always 'null' if *Participant* type is Contact
    """
    name: str | None
    """
    The name of the *Participant* record
    """
    initials: str | None
    """
    A  string with the participant initials
    """
    job_title_name: str | None
    """
    the job title name of the participant if they are a firm user and have one
    """


class PaymentBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Payment*
    """
    etag: str | None
    """
    ETag for the *Payment*
    """
    description: str | None
    """
    A detailed description of the *Payment*
    """
    reference: str | None
    """
    A reference for the payment
    """
    amount: float | None
    """
    Total amount paid. The default is 0.00.
    """
    date: date_aliased | None
    """
    The date the *Payment* was recorded (as a ISO-8601 date)
    """
    source_fund_type: SourceFundType | None
    """
    The fund type for *Payment* source
    """
    voided_at: datetime | None
    """
    Time the *Payment* was voided (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *Payment* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Payment* was last updated (as a ISO-8601 timestamp)
    """


class PaymentProfileBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *PaymentProfile*
    """
    etag: str | None
    """
    ETag for the *PaymentProfile*
    """
    created_at: datetime | None
    """
    The time the *PaymentProfile* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *PaymentProfile* was last updated (as a ISO-8601 timestamp)
    """
    billing_setting_id: int | None
    """
    The unique identifier for the *PaymentProfile
    """
    name: str | None
    """
    The name of the *PaymentProfile
    """
    terms: int | None
    """
    The total grace period for the *PaymentProfile
    """
    discount_rate: float | None
    """
    The early payment discount rate for the *PaymentProfile
    """
    discount_period: int | None
    """
    The early payment discount period for the *PaymentProfile
    """
    interest_rate: float | None
    """
    The interest rate for the *PaymentProfile
    """
    interest_period: int | None
    """
    The interest period interval for the *PaymentProfile
    """
    interest_type: Type11 | None
    """
    The type of interest to be calculated for the *PaymentProfile (Simple or Compound)
    """


class Permission(Enum):
    owner = 'owner'
    editor = 'editor'
    viewer = 'viewer'
    limited_viewer = 'limited_viewer'
    none = 'none'


class PhoneNumberBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *PhoneNumber*
    """
    etag: str | None
    """
    ETag for the *PhoneNumber*
    """
    number: str | None
    """
    Contact's Phone Number
    """
    name: Name1 | None
    """
    The type of *PhoneNumber* it is
    """
    primary: bool | None
    """
    Whether it is default for this contact
    """
    created_at: datetime | None
    """
    The time the *PhoneNumber* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *PhoneNumber* was last updated (as a ISO-8601 timestamp)
    """


class PhoneNumberList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[PhoneNumber]
    """
    PhoneNumber List Response
    """


class PicklistOptionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *PicklistOption*
    """
    etag: str | None
    """
    ETag for the *PicklistOption*
    """
    created_at: datetime | None
    """
    The time the *PicklistOption* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *PicklistOption* was last updated (as a ISO-8601 timestamp)
    """
    option: str | None
    """
    The value of the *PicklistOption*
    """
    deleted_at: datetime | None
    """
    The time the *PicklistOption* was deleted (as a ISO-8601 timestamp)
    """


class PolymorphicCustomRateActivityDescriptionBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ActivityDescription*
    """
    etag: str | None
    """
    ETag for the *ActivityDescription*
    """
    name: str | None
    """
    The name of the *ActivityDescription*
    """


class PolymorphicCustomRateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    The unique identifier for the custom rate
    """
    etag: str | None
    """
    ETag for the *PolymorphicCustomRate*
    """
    created_at: datetime | None
    """
    The time the *PolymorphicCustomRate* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *PolymorphicCustomRate* was last updated (as a ISO-8601 timestamp)
    """
    rate: float | None
    """
    If `custom_rate.type` is `HourlyRate`, it is the dollar amount of the custom rate of the User or Group for the Matter.

    If `custom_rate.type` is `FlatRate`, it is the dollar amount of the custom flat rate for the Matter.

    If `custom_rate.type` is `ContingencyFee`, it is the percentage of the contingency fee awarded to the user for the Matter. The value may also be expressed as string that represents a rational number such as `1/3`.

    If the user does not have sufficient rate visibility, the rates are hidden.

    """
    award: float | None
    """
    The value of the ContingencyFee award.
    """
    note: str | None
    """
    Details about the ContingencyFee award.
    """
    date: date_aliased | None
    """
    The date of the ContingencyFee award.
    """


class PolymorphicCustomRateGroupBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    etag: str | None
    """
    ETag for the *Group*
    """
    id: int | None
    """
    Unique identifier for the *Group*
    """
    name: str | None
    """
    The name of the *Group*
    """


class PolymorphicCustomRateUserBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    enabled: bool | None
    """
    Whether the *User* is allowed to log in
    """
    etag: str | None
    """
    ETag for the *User*
    """
    id: int | None
    """
    Unique identifier for the *User*
    """
    name: str | None
    """
    The full name of the *User*
    """


class PolymorphicObjectBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *PolymorphicObject*
    """
    type: Type27 | None
    """
    The type of the *PolymorphicObject*
    """
    identifier: str | None
    """
    A string to identify the *PolymorphicObject*
    """
    secondary_identifier: str | None
    """
    A secondary string to identify the *PolymorphicObject*
    """
    tertiary_identifier: str | None
    """
    A tertiary string to identify the *PolymorphicObject*
    """


class PracticeAreaBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *PracticeArea*
    """
    etag: str | None
    """
    ETag for the *PracticeArea*
    """
    created_at: datetime | None
    """
    The time the *PracticeArea* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *PracticeArea* was last updated (as a ISO-8601 timestamp)
    """
    name: str | None
    """
    The name of the *PracticeArea*
    """
    category: Category | None
    """
    The practice area category associated with the *PracticeArea*

    """
    code: str | None
    """
    The code of the *PracticeArea*
    """


class PracticeAreaList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[PracticeArea]
    """
    PracticeArea List Response
    """


class PracticeAreaShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: PracticeArea


class Priority(Enum):
    high = 'High'
    normal = 'Normal'
    low = 'Low'


class RelatedContactsBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *RelatedContacts*
    """
    contact_id: int | None
    """
    The id of the *RelatedContacts*
    """
    name: str | None
    """
    The full name of the *RelatedContacts*
    """
    first_name: str | None
    """
    First name of the Person
    """
    middle_name: str | None
    """
    Middle name of the Person
    """
    last_name: str | None
    """
    Last name of the Person
    """
    type: Type9 | None
    """
    The type of the *RelatedContacts*
    """
    created_at: datetime | None
    """
    The time the *RelatedContacts* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *RelatedContacts* was last updated (as a ISO-8601 timestamp)
    """
    prefix: str | None
    """
    The prefix of the *RelatedContacts* (Mr, Mrs, etc)
    """
    title: str | None
    """
    The designated title of the *RelatedContacts*
    """
    initials: str | None
    """
    The initials of the *RelatedContacts*
    """
    is_matter_client: bool | None
    """
    Whether or not the RelatedContacts is also the client of the matter
    """
    primary_email_address: str | None
    """
    The primary email address of related contact
    """
    primary_phone_number: str | None
    """
    The primary phone number of related contact
    """
    client_connect_user_id: int | None
    """
    The client connect ID of the contacts associated user
    """


class RelatedContactsList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[RelatedContacts]
    """
    RelatedContacts List Response
    """


class RelationshipBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Relationship*
    """
    etag: str | None
    """
    ETag for the *Relationship*
    """
    description: str | None
    """
    A detailed description of the *Relationship*
    """
    created_at: datetime | None
    """
    The time the *Relationship* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Relationship* was last updated (as a ISO-8601 timestamp)
    """


class RelationshipList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Relationship]
    """
    Relationship List Response
    """


class RelationshipShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Relationship


class ReminderBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Reminder*
    """
    etag: str | None
    """
    ETag for the *Reminder*
    """
    duration: int | None
    """
    Time in minutes to remind user before the subject
    """
    next_delivery_at: datetime | None
    """
    The time the *Reminder* will be delivered (as a ISO-8601 timestamp)
    """
    state: State4 | None
    """
    The current state of the *Reminder*
    """
    created_at: datetime | None
    """
    The time the *Reminder* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Reminder* was last updated (as a ISO-8601 timestamp)
    """


class ReminderList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Reminder]
    """
    Reminder List Response
    """


class ReminderShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Reminder


class ReminderTemplateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ReminderTemplate*
    """
    etag: str | None
    """
    ETag for the *ReminderTemplate*
    """
    duration: int | None
    """
    The time in minutes to remind user before the subject.
    """
    notification_type: NotificationType | None
    """
    The type of method to be notified by
    """
    created_at: datetime | None
    """
    The time the *ReminderTemplate* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ReminderTemplate* was last updated (as a ISO-8601 timestamp)
    """


class ReportBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Report*
    """
    etag: str | None
    """
    ETag for the *Report*
    """
    name: str | None
    """
    A specified name for the report
    """
    state: State5 | None
    """
    The current state of the report
    """
    kind: Kind2 | None
    """
    The kind of report to generate
    """
    format: Format | None
    """
    The requested format of the report
    """
    progress: int | None
    """
    The integer percentage of how complete the report is.
    """
    created_at: datetime | None
    """
    The time the *Report* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Report* was last updated (as a ISO-8601 timestamp)
    """
    category: Category1 | None
    """
    The category of the report
    """
    source: Source1 | None
    """
    The source of the report
    """


class ReportList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Report]
    """
    Report List Response
    """


class ReportPresetBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ReportPreset*
    """
    etag: str | None
    """
    ETag for the *ReportPreset*
    """
    name: str | None
    """
    A specified name for the report preset
    """
    kind: Kind2 | None
    """
    The kind of report the preset generates
    """
    format: Format | None
    """
    The format of the report the preset generates
    """
    last_generated_at: datetime | None
    """
    The time of the last generated report from this preset (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *ReportPreset* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ReportPreset* was last updated (as a ISO-8601 timestamp)
    """
    category: Category1 | None
    """
    The category of the report the preset generates
    """
    options: str | None
    """
    The report options parameters
    """


class ReportPresetList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ReportPreset]
    """
    ReportPreset List Response
    """


class ReportPresetShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ReportPreset


class ReportScheduleBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ReportSchedule*
    """
    etag: str | None
    """
    ETag for the *ReportSchedule*
    """
    time_of_day: datetime | None
    """
    What time the Report Schedule is run
    """
    frequency: Frequency | None
    """
    How often the Report Schedule is run
    """
    days_of_week: list[int] | None
    """
    If the frequency is weekly, which days of the week the Report Schedule is run. Values are 0 to 6, representing Sunday to Saturday.
    """
    day_of_month: int | None
    """
    If the frequency is monthly, which day of the month the Report Schedule is run. 32 is used to represent the last day of the month.
    """
    status: Status1 | None
    """
    The status of the Report Schedule
    """
    status_updated_at: datetime | None
    """
    When the status of the Report Schedule was last updated
    """
    next_scheduled_date: datetime | None
    """
    The next time the Report Schedule should run
    """
    time_zone: str | None
    """
    Used in conjunction with `time_of_day` to determine when the Report Schedule should run
    """
    report_preset_id: int | None
    """
    The unique identifier of the Report Preset to use when generating the scheduled report
    """
    created_at: datetime | None
    """
    The time the *ReportSchedule* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ReportSchedule* was last updated (as a ISO-8601 timestamp)
    """
    every_no_of_months: int | None
    """
    If the frequency is monthly, how many months between each run of the Report Schedule
    """
    effective_from: date_aliased | None
    """
    The date the Report Schedule will become enabled (a ISO-8601 date)
    """


class ReportScheduleList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ReportSchedule]
    """
    ReportSchedule List Response
    """


class ReportScheduleShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ReportSchedule


class ReportShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Report


class SecondaryTaxRule(Enum):
    pre = 'Pre'
    post = 'Post'


class ServiceTypeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *ServiceType*
    """
    etag: str | None
    """
    ETag for the *ServiceType*
    """
    created_at: datetime | None
    """
    The time the *ServiceType* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *ServiceType* was last updated (as a ISO-8601 timestamp)
    """
    system_id: int | None
    """
    Server ID
    """
    description: str | None
    """
    A detailed description of the *ServiceType*
    """
    default: bool | None
    """
    Whether *ServiceType* is default for the current user
    """


class ServiceTypeList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ServiceType]
    """
    ServiceType List Response
    """


class ServiceTypeShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: ServiceType


class Source(Enum):
    web = 'web'
    mobile = 'mobile'


class Source1(Enum):
    reports = 'reports'
    presets = 'presets'
    scheduled = 'scheduled'


class SourceFundType(Enum):
    client = 'Client'
    matter = 'Matter'


class SplitInvoiceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *SplitInvoice*
    """
    bill_id: int | None
    """
    The ID of the bill that was split.
    """
    linked_invoices_display_numbers: list[str] | None
    """
    Display numbers of all invoices split with this one.
    """
    linked_invoices_ids: list[int] | None
    """
    IDs of all invoices split with this one.
    """
    split_connection_id: str | None
    """
    UUID to determine which invoices are split together.
    """
    split_portion: float | None
    """
    The percentage of the bill that the payer is responsible for.
    """
    etag: str | None
    """
    ETag for the *SplitInvoice*
    """
    created_at: datetime | None
    """
    The time the *SplitInvoice* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *SplitInvoice* was last updated (as a ISO-8601 timestamp)
    """


class SplitInvoicePayerBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *SplitInvoicePayer*
    """
    contact_id: int | None
    """
    The ID of the payer for the split invoice.
    """
    matter_id: int | None
    """
    The ID of the Matter that has split invoicing enabled.
    """
    send_to_bill_recipients: bool | None
    """
    Boolean to indicate if the sent bills should include bill recipients by default.
    """
    split_portion: float | None
    """
    The percentage of the bill that the payer is responsible for.
    """
    etag: str | None
    """
    ETag for the *SplitInvoicePayer*
    """
    created_at: datetime | None
    """
    The time the *SplitInvoicePayer* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *SplitInvoicePayer* was last updated (as a ISO-8601 timestamp)
    """


class State(Enum):
    not_started = 'not_started'
    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'
    failed = 'failed'


class State1(Enum):
    not_started = 'not_started'
    queued = 'queued'
    in_progress = 'in_progress'
    empty = 'empty'
    failed = 'failed'
    completed = 'completed'


class State2(Enum):
    draft = 'draft'
    awaiting_approval = 'awaiting_approval'
    awaiting_payment = 'awaiting_payment'
    paid = 'paid'
    void = 'void'
    deleted = 'deleted'


class State3(Enum):
    pending = 'pending'
    authorized = 'authorized'
    completed = 'completed'
    voided = 'voided'
    failed = 'failed'
    canceled = 'canceled'
    requires_confirmation = 'requires_confirmation'
    completed_requiring_allocation = 'completed_requiring_allocation'


class State4(Enum):
    initializing = 'initializing'
    scheduling = 'scheduling'
    rescheduling = 'rescheduling'
    scheduled = 'scheduled'
    attempting_delivery = 'attempting_delivery'
    delivery_failed = 'delivery_failed'
    delivered = 'delivered'
    delivery_skipped = 'delivery_skipped'
    invalid_user = 'invalid_user'


class State5(Enum):
    not_started = 'not_started'
    queued = 'queued'
    in_progress = 'in_progress'
    failed = 'failed'
    completed = 'completed'
    empty = 'empty'


class Status(Enum):
    pending = 'Pending'
    open = 'Open'
    closed = 'Closed'


class Status1(Enum):
    initial = 'initial'
    queued = 'queued'
    processing = 'processing'
    failed = 'failed'
    completed = 'completed'


class Status2(Enum):
    pending = 'pending'
    in_progress = 'in_progress'
    in_review = 'in_review'
    complete = 'complete'


class Status3(Enum):
    pending = 'pending'
    enabled = 'enabled'
    suspended = 'suspended'


class SubscriptionType(Enum):
    attorney = 'Attorney'
    non_attorney = 'NonAttorney'


class TaskBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Task*
    """
    etag: str | None
    """
    ETag for the *Task*
    """
    name: str | None
    """
    The name of the *Task*
    """
    status: Status2 | None
    """
    Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)
    """
    description: str | None
    """
    A detailed description of the *Task*. This Task supports rich text when setting the field `description_text_type` to `rich_text`. With supported tags such as `<a>`, `<b>`, `<br>`, `<div>`, `<em>`, `<i>` `<li>`, `<ol>`, `<p>`, `<s>`, `<strong>`, `<u>` and `<ul>`. This Task also supports attributes such as `href`, `rel`, `type`, and `target`.
    """
    description_text_type: DetailTextType | None
    """
    The text type of the *Task*
    """
    priority: Priority | None
    """
    The priority of the *Task*
    """
    due_at: date_aliased | None
    """
    The date the *Task* is due (as a ISO-8601 date)
    """
    permission: str | None
    """
    The permission of the *Task*
    """
    completed_at: datetime | None
    """
    The time the *Task* was completed (as a ISO-8601 timestamp)
    """
    notify_completion: bool | None
    """
    Whether to notify the assigner of the task's completion
    """
    statute_of_limitations: bool | None
    """
    Whether the task is a statute of limitations
    """
    time_estimated: int | None
    """
    Time the *Task* should take to complete
    """
    created_at: datetime | None
    """
    The time the *Task* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Task* was last updated (as a ISO-8601 timestamp)
    """
    time_entries_count: int | None
    """
    The number of time entries associated with this task
    """


class TaskList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Task]
    """
    Task List Response
    """


class TaskShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Task


class TaskTemplateBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TaskTemplate*
    """
    etag: str | None
    """
    ETag for the *TaskTemplate*
    """
    name: str | None
    """
    The name of the *TaskTemplate*
    """
    description: str | None
    """
    The text body of the *TaskTemplate*. This TaskTemplate supports rich text when setting the field `detail_text_type` to `rich_text`. With supported tags such as `<a>`, `<b>`, `<br>`, `<div>`, `<em>`, `<i>` `<li>`, `<ol>`, `<p>`, `<s>`, `<strong>`, `<u>` and `<ul>`. This TaskTemplate also supports attributes such as `href`, `rel`, `type`, and `target`.
    """
    description_text_type: DetailTextType | None
    """
    The type of text in the description field.
    """
    priority: Priority | None
    """
    *TaskTemplate* priority
    """
    private: bool | None
    """
    Whether the *TaskTemplate* is private.
    """
    created_at: datetime | None
    """
    The time the *TaskTemplate* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)
    """


class TaskTemplateList1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[TaskTemplate]
    """
    TaskTemplate List Response
    """


class TaskTemplateListBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_at: datetime | None
    """
    The time the *TaskTemplateList* was created (as a ISO-8601 timestamp)
    """
    description: str | None
    """
    A detailed description of the *TaskTemplateList*
    """
    id: int | None
    """
    Unique identifier for the *TaskTemplateList*
    """
    etag: str | None
    """
    ETag for the *TaskTemplateList*
    """
    name: str | None
    """
    The name of the *TaskTemplateList*
    """
    templates_count: int | None
    """
    How many task templates exist as an association to the *TaskTemplateList*
    """
    updated_at: datetime | None
    """
    The time the *TaskTemplateList* was last updated (as a ISO-8601 timestamp)
    """


class TaskTemplateListInstaceBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TaskTemplateListInstace*
    """
    etag: str | None
    """
    ETag for the *TaskTemplateListInstace*
    """
    created_at: datetime | None
    """
    The time the *TaskTemplateListInstace* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *TaskTemplateListInstace* was last updated (as a ISO-8601 timestamp)
    """


class TaskTemplateListList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[TaskTemplateList]
    """
    TaskTemplateList List Response
    """


class TaskTemplateListShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: TaskTemplateList


class TaskTemplateShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: TaskTemplate


class TaskTypeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TaskType*
    """
    etag: str | None
    """
    ETag for the *TaskType*
    """
    name: str | None
    """
    The name of the *TaskType*
    """
    deleted_at: datetime | None
    """
    The time the *TaskType* was deleted (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *TaskType* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *TaskType* was last updated (as a ISO-8601 timestamp)
    """


class TaskTypeList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[TaskType]
    """
    TaskType List Response
    """


class TaskTypeShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: TaskType


class TaxSetting(Enum):
    no_tax = 'no_tax'
    tax_1_only = 'tax_1_only'
    tax_2_only = 'tax_2_only'
    tax_1_and_tax_2 = 'tax_1_and_tax_2'


class TextSnippetBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TextSnippet*
    """
    etag: str | None
    """
    ETag for the *TextSnippet*
    """
    created_at: datetime | None
    """
    The time the *TextSnippet* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *TextSnippet* was last updated (as a ISO-8601 timestamp)
    """
    snippet: str | None
    """
    The abbreviation that should be expanded
    """
    phrase: str | None
    """
    The phrase the abbreviation should be expanded to
    """
    whole_word: bool | None
    """
    Whether the *TextSnippet* abbreviation requires a space after it has been entered to expand to a phrase
    """


class TextSnippetList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[TextSnippet]
    """
    TextSnippet List Response
    """


class TextSnippetShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: TextSnippet


class TimerBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Timer*
    """
    etag: str | None
    """
    ETag for the *Timer*
    """
    start_time: datetime | None
    """
    The time the *Timer* was started (as ISO-8601 timestamp)
    """
    elapsed_time: float | None
    """
    How much time has elapsed, in hours, since the timer was started
    """
    created_at: datetime | None
    """
    The time the *Timer* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Timer* was last updated (as a ISO-8601 timestamp)
    """


class TimerShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Timer


class TrustLineItemBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TrustLineItem*
    """
    etag: str | None
    """
    ETag for the *TrustLineItem*
    """
    date: date_aliased | None
    """
    The date of the *TrustLineItem* (as a ISO-8601 date)
    """
    total: float | None
    """
    The total amount for the *TrustLineItem*
    """
    note: str | None
    """
    Note for the *TrustLineItem*
    """
    created_at: datetime | None
    """
    The time the *TrustLineItem* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *TrustLineItem* was last updated (as a ISO-8601 timestamp)
    """


class TrustLineItemList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[TrustLineItem]
    """
    TrustLineItem List Response
    """


class TrustLineItemShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: TrustLineItem


class TrustRequestBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *TrustRequest*
    """
    etag: str | None
    """
    ETag for the *TrustRequest*
    """
    created_at: datetime | None
    """
    The time the *TrustRequest* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *TrustRequest* was last updated (as a ISO-8601 timestamp)
    """


class TrustRequestShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: TrustRequest


class Type(Enum):
    document = 'Document'


class Type1(Enum):
    folder = 'Folder'


class Type10(Enum):
    user_group = 'UserGroup'
    adhoc_group = 'AdhocGroup'
    account_group = 'AccountGroup'
    team_group = 'TeamGroup'


class Type11(Enum):
    simple = 'simple'
    compound = 'compound'


class Type12(Enum):
    activity_line_item = 'ActivityLineItem'
    line_item = 'LineItem'
    no_charge_line_item = 'NoChargeLineItem'
    summary_line_item = 'SummaryLineItem'


class Type13(Enum):
    matter_log_entry = 'MatterLogEntry'
    contact_log_entry = 'ContactLogEntry'


class Type17(Enum):
    matter = 'Matter'
    contact = 'Contact'


class Type18(Enum):
    utbms_task = 'UtbmsTask'
    utbms_expense = 'UtbmsExpense'
    utbms_activity = 'UtbmsActivity'


class Type2(Enum):
    document = 'Document'
    folder = 'Folder'


class Type20(Enum):
    user = 'User'
    flat_rate = 'FlatRate'
    custom = 'Custom'


class Type21(Enum):
    contact = 'Contact'
    calendar = 'Calendar'


class Type22(Enum):
    manage_user = 'ManageUser'
    client_user = 'ClientUser'


class Type23(Enum):
    percentage = 'percentage'
    money = 'money'


class Type24(Enum):
    flat_rate = 'FlatRate'
    hourly_rate = 'HourlyRate'
    contingency_fee = 'ContingencyFee'


class Type25(Enum):
    email = 'Email'
    popup = 'Popup'
    sms = 'SMS'


class Type26(Enum):
    person = 'Person'
    company = 'Company'
    user = 'User'


class Type27(Enum):
    task = 'Task'
    calendar_entry = 'CalendarEntry'
    matter_note = 'MatterNote'
    contact_note = 'ContactNote'
    matter = 'Matter'
    contact = 'Contact'
    user = 'User'
    credit_memo = 'CreditMemo'
    payment = 'Payment'


class Type3(Enum):
    time_entry = 'TimeEntry'
    expense_entry = 'ExpenseEntry'
    hard_cost_entry = 'HardCostEntry'
    soft_cost_entry = 'SoftCostEntry'


class Type4(Enum):
    matter = 'Matter'
    client = 'Client'


class Type5(Enum):
    operating = 'Operating'
    trust = 'Trust'


class Type6(Enum):
    matter_bill = 'MatterBill'
    client_bill = 'ClientBill'


class Type7(Enum):
    account_calendar = 'AccountCalendar'
    adhoc_calendar = 'AdhocCalendar'
    user_calendar = 'UserCalendar'


class Type8(Enum):
    email_communication = 'EmailCommunication'
    phone_communication = 'PhoneCommunication'


class Type9(Enum):
    company = 'Company'
    person = 'Person'


class UiReference(Enum):
    activities_show = 'activities/show'
    documents_show = 'documents/show'
    contacts_show = 'contacts/show'
    matters_show = 'matters/show'
    folders_show = 'folders/show'


UnredactedParticipantBase = MyEventBase


class UserBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    account_owner: bool | None
    """
    Whether the *User* is the owner of the account
    """
    clio_connect: bool | None
    """
    Whether the *User* is a Clio Connect user
    """
    court_rules_default_attendee: bool | None
    """
    Whether the *User* is a default attendee for court rules events
    """
    created_at: datetime | None
    """
    The time the *User* was created (as a ISO-8601 timestamp)
    """
    default_calendar_id: int | None
    """
    Default calendar id for *User*.
    """
    email: str | None
    """
    The email of the *User*
    """
    enabled: bool | None
    """
    Whether the *User* is allowed to log in
    """
    etag: str | None
    """
    ETag for the *User*
    """
    first_name: str | None
    """
    The first name of the *User*
    """
    id: int | None
    """
    Unique identifier for the *User*
    """
    initials: str | None
    """
    The initials of the *User*
    """
    last_name: str | None
    """
    The last name of the *User*
    """
    name: str | None
    """
    The full name of the *User*
    """
    phone_number: str | None
    """
    The primary phone number for the *User*.
    """
    rate: float | None
    """
    Default user activity rate for *User*.
    """
    roles: list[str] | None
    """
    An array of roles assigned to this *User*
    """
    subscription_type: SubscriptionType | None
    """
    The subscription type of the *User*
    """
    time_zone: str | None
    """
    The selected time zone of the *User*
    """
    updated_at: datetime | None
    """
    The time the *User* was last updated (as a ISO-8601 timestamp)
    """


class UserList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[User]
    """
    User List Response
    """


class UserShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: User


class UtbmsCodeBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *UtbmsCode*
    """
    etag: str | None
    """
    ETag for the *UtbmsCode*
    """
    name: str | None
    """
    The name of the *UtbmsCode*
    """
    code: str | None
    """
    The UTBMS code for the *UtbmsCode*
    """
    description: str | None
    """
    The UTBMS description for the *UtbmsCode*
    """
    type: Type18 | None
    """
    The type of the *UtbmsCode*
    """
    utbms_set_id: int | None
    """
    Set id for the *UtbmsCode*
    """
    created_at: datetime | None
    """
    The time the *UtbmsCode* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *UtbmsCode* was last updated (as a ISO-8601 timestamp)
    """


class UtbmsCodeList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[UtbmsCode]
    """
    UtbmsCode List Response
    """


class UtbmsCodeShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: UtbmsCode


class UtbmsSetBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *UtbmsSet*
    """
    etag: str | None
    """
    ETag for the *UtbmsSet*
    """
    name: str | None
    """
    The name of the *UtbmsSet*
    """
    enabled: bool | None
    """
    Whether the *UtbmsSet* is enabled for the current account.
    """
    created_at: datetime | None
    """
    The time the *UtbmsSet* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *UtbmsSet* was last updated (as a ISO-8601 timestamp)
    """


class UtbmsSetList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[UtbmsSet]
    """
    UtbmsSet List Response
    """


class WebSiteBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *WebSite*
    """
    etag: str | None
    """
    ETag for the *WebSite*
    """
    address: str | None
    """
    The address of the *WebSite*
    """
    name: Name3 | None
    """
    The type of *WebSite* it is
    """
    default_web_site: bool | None
    """
    Whether it is the default for this contact
    """
    created_at: datetime | None
    """
    The time the *WebSite* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *WebSite* was last updated (as a ISO-8601 timestamp)
    """


class WebhookBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int | None
    """
    Unique identifier for the *Webhook*
    """
    etag: str | None
    """
    ETag for the *Webhook*
    """
    url: str | None
    """
    The `https` URL to send the data to when the events are triggered
    """
    fields: str | None
    """
    Fields to be included in the webhook request
    """
    shared_secret: str | None
    """
    A shared secret used to create a signature for the payload
    """
    model: Model | None
    """
    What kind of records the webhook is for
    """
    status: Status3 | None
    """
    The current status of the webhook.
    """
    events: list[Event1] | None
    """
    The events your webhook is subscribed to.
    """
    expires_at: datetime | None
    """
    The time webhook will expire (as a ISO-8601 timestamp)
    """
    created_at: datetime | None
    """
    The time the *Webhook* was created (as a ISO-8601 timestamp)
    """
    updated_at: datetime | None
    """
    The time the *Webhook* was last updated (as a ISO-8601 timestamp)
    """


class WebhookList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[Webhook]
    """
    Webhook List Response
    """


class WebhookShow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Webhook


class Account(AccountBase):
    model_config = ConfigDict(
        extra='allow',
    )
    owner: UserBase | None
    """
    User
    """


class Activity(ActivityBase):
    model_config = ConfigDict(
        extra='allow',
    )
    activity_description: ActivityDescriptionBase | None
    """
    ActivityDescription
    """
    expense_category: ExpenseCategoryBase | None
    """
    ExpenseCategory
    """
    bill: BillBase | None
    """
    Bill
    """
    communication: CommunicationBase | None
    """
    Communication
    """
    client_portal: ClientPortalBase | None
    """
    ClientPortal
    """
    matter: MatterBase | None
    """
    Matter
    """
    matter_note: NoteBase | None
    """
    Note
    """
    contact_note: NoteBase | None
    """
    Note
    """
    subject: PolymorphicObjectBase | None
    """
    PolymorphicObject
    """
    timer: TimerBase | None
    """
    Timer
    """
    user: UserBase | None
    """
    User
    """
    utbms_expense: UtbmsCodeBase | None
    """
    UtbmsCode
    """
    vendor: ContactBase | None
    """
    Contact
    """
    calendar_entry: ActivityCalendarEntryBase | None
    """
    CalendarEntry
    """
    task: ActivityTaskBase | None
    """
    Task
    """
    text_message_conversation: ActivityTextMessageConversationBase | None
    """
    TextMessageConversation
    """
    document_version: DocumentVersionBase | None
    """
    DocumentVersion
    """
    legal_aid_uk_activity: LegalAidUkActivityBase | None
    """
    LegalAidUkActivity
    """
    currency: CurrencyBase | None
    """
    Currency
    """


class ActivityDescription(ActivityDescriptionBase):
    model_config = ConfigDict(
        extra='allow',
    )
    groups: list[GroupBase] | None
    """
    Group
    """
    rate: ActivityDescriptionRateBase | None
    """
    ActivityDescriptionRate
    """
    utbms_task: UtbmsCodeBase | None
    """
    UtbmsCode
    """
    utbms_activity: UtbmsCodeBase | None
    """
    UtbmsCode
    """
    currency: CurrencyBase | None
    """
    Currency
    """


class ActivityRate(ActivityRateBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: UserBase | None
    """
    User
    """
    group: GroupBase | None
    """
    Group
    """


class Address(AddressBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Allocation(AllocationBase):
    model_config = ConfigDict(
        extra='allow',
    )
    bill: BillBase | None
    """
    Bill
    """
    source_bank_account: BankAccountBase | None
    """
    BankAccount
    """
    destination_bank_account: BankAccountBase | None
    """
    BankAccount
    """
    matter: MatterBase | None
    """
    Matter
    """
    contact: ContactBase | None
    """
    Contact
    """
    parent: PolymorphicObjectBase | None
    """
    PolymorphicObject
    """


class Balance(BalanceBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class BankAccount(BankAccountBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: UserBase | None
    """
    User
    """


class BankTransaction(BankTransactionBase):
    model_config = ConfigDict(
        extra='allow',
    )
    client: ContactBase | None
    """
    Contact
    """
    matter: MatterBase | None
    """
    Matter
    """
    bank_account: BankAccountBase | None
    """
    BankAccount
    """
    bill: BillBase | None
    """
    Bill
    """
    allocation: AllocationBase | None
    """
    Allocation
    """


class BankTransfer(BankTransferBase):
    model_config = ConfigDict(
        extra='allow',
    )
    client: ContactBase | None
    """
    Contact
    """
    destination_account: BankAccountBase | None
    """
    BankAccount
    """
    matter: MatterBase | None
    """
    Matter
    """
    source_account: BankAccountBase | None
    """
    BankAccount
    """


class Bill(BillBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: UserBase | None
    """
    User
    """
    client: ContactBase | None
    """
    Contact
    """
    discount: DiscountBase | None
    """
    Discount
    """
    interest: InterestBase | None
    """
    Interest
    """
    matters: list[MatterBase] | None
    """
    Matter
    """
    group: GroupBase | None
    """
    Group
    """
    bill_theme: BillThemeBase | None
    """
    BillTheme
    """
    original_bill: BillBase | None
    """
    Bill
    """
    destination_account: BankAccountBase | None
    """
    BankAccount
    """
    balances: list[BalanceBase] | None
    """
    Balance
    """
    matter_totals: list[MatterBalanceBase] | None
    """
    MatterBalance
    """
    currency: CurrencyBase | None
    """
    Currency
    """
    billing_setting: BillingSettingBase | None
    """
    BillingSetting
    """
    client_addresses: list[AddressBase] | None
    """
    Address
    """
    legal_aid_uk_bill: LegalAidUkBillBase | None
    """
    LegalAidUkBill
    """
    split_invoice: SplitInvoiceBase | None
    """
    SplitInvoice
    """


class BillRecipient(BillRecipientBase):
    model_config = ConfigDict(
        extra='allow',
    )
    recipient: BillRecipientContactBase | None
    """
    Contact
    """


class BillTheme(BillThemeBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class BillableClient(BillableClientBase):
    model_config = ConfigDict(
        extra='allow',
    )
    billable_matters: list[BillableMatterBase] | None
    """
    BillableMatter
    """


class BillableMatter(BillableMatterBase):
    model_config = ConfigDict(
        extra='allow',
    )
    client: ContactBase | None
    """
    Contact
    """


class BillingSetting(BillingSettingBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Calendar(CalendarBase):
    model_config = ConfigDict(
        extra='allow',
    )
    creator: UserBase | None
    """
    User
    """


class CalendarEntry(CalendarEntryBase):
    model_config = ConfigDict(
        extra='allow',
    )
    time_entries: list[ActivityBase] | None
    """
    Activity
    """
    conference_meeting: ConferenceMeetingBase | None
    """
    ConferenceMeeting
    """
    matter: MatterBase | None
    """
    Matter
    """
    matter_docket: MatterDocketBase | None
    """
    MatterDocket
    """
    calendar_owner: CalendarBase | None
    """
    Calendar
    """
    parent_calendar_entry: CalendarEntryBase | None
    """
    CalendarEntry
    """
    calendar_entry_event_type: CalendarEntryEventTypeBase | None
    """
    CalendarEntryEventType
    """
    attendees: list[AttendeeBase] | None
    """
    Attendee
    """
    calendars: list[CalendarBase] | None
    """
    Calendar
    """
    reminders: list[ReminderBase] | None
    """
    Reminder
    """
    external_properties: list[ExternalPropertyBase] | None
    """
    ExternalProperty
    """


class CalendarEntryEventType(CalendarEntryEventTypeBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class CalendarVisibility(CalendarVisibilityBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


CascadingTaskBase = MyEventBase


class Client(ClientBase):
    model_config = ConfigDict(
        extra='allow',
    )
    avatar: AvatarBase | None
    """
    Avatar
    """
    company: ContactBase | None
    """
    Contact
    """
    addresses: list[AddressBase] | None
    """
    Address
    """
    email_addresses: list[EmailAddressBase] | None
    """
    EmailAddress
    """
    phone_numbers: list[PhoneNumberBase] | None
    """
    PhoneNumber
    """
    web_sites: list[WebSiteBase] | None
    """
    WebSite
    """


class ClioPaymentsLink(ClioPaymentsLinkBase):
    model_config = ConfigDict(
        extra='allow',
    )
    bank_account: BankAccountBase | None
    """
    BankAccount
    """
    bill: BillBase | None
    """
    Bill
    """
    clio_payments_payment: ClioPaymentsPaymentBase | None
    """
    ClioPaymentsPayment
    """
    contact: ContactBase | None
    """
    Contact
    """
    destination_account: BankAccountBase | None
    """
    BankAccount
    """
    destination_contact: ContactBase | None
    """
    Contact
    """


class ClioPaymentsPayment(ClioPaymentsPaymentBase):
    model_config = ConfigDict(
        extra='allow',
    )
    bank_transaction: BankTransactionBase | None
    """
    BankTransaction
    """
    clio_payments_link: ClioPaymentsLinkBase | None
    """
    ClioPaymentsLink
    """
    contact: ContactBase | None
    """
    Contact
    """
    destination_account: BankAccountBase | None
    """
    BankAccount
    """
    user: UserBase | None
    """
    User
    """
    allocations: list[AllocationBase] | None
    """
    Allocation
    """
    bills: list[BillBase] | None
    """
    Bill
    """
    matters: list[MatterBase] | None
    """
    Matter
    """


class Comment(CommentBase):
    model_config = ConfigDict(
        extra='allow',
    )
    creator: UserBase | None
    """
    User
    """
    document_version: DocumentVersionBase | None
    """
    DocumentVersion
    """


class Communication(CommunicationBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: UserBase | None
    """
    User
    """
    matter: MatterBase | None
    """
    Matter
    """
    communication_eml_file: CommunicationEmlFileBase | None
    """
    CommunicationEmlFile
    """
    senders: list[Participant] | None
    """
    Participant
    """
    receivers: list[Participant] | None
    """
    Participant
    """
    external_properties: list[ExternalPropertyBase] | None
    """
    ExternalProperty
    """
    time_entries: list[ActivityBase] | None
    """
    Activity
    """
    documents: list[DocumentBase] | None
    """
    Document
    """
    notification_event_subscribers: list[NotificationEventSubscriberBase] | None
    """
    NotificationEventSubscriber
    """


class Contact(ContactBase):
    model_config = ConfigDict(
        extra='allow',
    )
    activity_rates: list[ActivityRateBase] | None
    """
    ActivityRate
    """
    addresses: list[AddressBase] | None
    """
    Address
    """
    custom_field_values: list[CustomFieldValue] | None
    """
    CustomFieldValue
    """
    custom_field_set_associations: list[CustomFieldSetAssociationBase] | None
    """
    CustomFieldSetAssociation
    """
    email_addresses: list[EmailAddressBase] | None
    """
    EmailAddress
    """
    instant_messengers: list[InstantMessengerBase] | None
    """
    InstantMessenger
    """
    phone_numbers: list[PhoneNumberBase] | None
    """
    PhoneNumber
    """
    web_sites: list[WebSiteBase] | None
    """
    WebSite
    """
    notification_methods: list[NotificationMethodBase] | None
    """
    NotificationMethod
    """
    account_balances: list[AccountBalanceBase] | None
    """
    AccountBalance
    """
    related_contacts: list[ContactBase] | None
    """
    Contact
    """
    primary_work_address: AddressBase | None
    """
    Address
    """
    primary_address: AddressBase | None
    """
    Address
    """
    secondary_address: AddressBase | None
    """
    Address
    """
    company: ContactBase | None
    """
    Contact
    """
    avatar: AvatarBase | None
    """
    Avatar
    """
    payment_profile: PaymentProfileBase | None
    """
    PaymentProfile
    """
    folder: FolderBase | None
    """
    Folder
    """
    co_counsel_rate: ActivityRateBase | None
    """
    ActivityRate
    """
    primary_web_site: WebSiteBase | None
    """
    WebSite
    """
    legal_aid_uk_contact: LegalAidUkContactBase | None
    """
    LegalAidUkContact
    """
    currency: CurrencyBase | None
    """
    Currency
    """


class Conversation(ConversationBase):
    model_config = ConfigDict(
        extra='allow',
    )
    last_message: ConversationMessageBase | None
    """
    ConversationMessage
    """
    first_message: ConversationMessageBase | None
    """
    ConversationMessage
    """
    matter: MatterBase | None
    """
    Matter
    """
    messages: list[ConversationMessageBase] | None
    """
    ConversationMessage
    """
    documents: list[DocumentBase] | None
    """
    Document
    """
    memberships: list[ConversationMembership] | None
    """
    ConversationMembership
    """


class ConversationMembership(ConversationMembershipBase):
    model_config = ConfigDict(
        extra='allow',
    )
    member: UnredactedParticipantBase | None
    """
    UnredactedParticipant
    """


class ConversationMessage(ConversationMessageBase):
    model_config = ConfigDict(
        extra='allow',
    )
    sender: UnredactedParticipantBase | None
    """
    UnredactedParticipant
    """
    document: DocumentBase | None
    """
    Document
    """
    conversation: ConversationBase | None
    """
    Conversation
    """
    receivers: list[UnredactedParticipantBase] | None
    """
    UnredactedParticipant
    """


class CreditMemo(CreditMemoBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: UserBase | None
    """
    User
    """
    contact: ContactBase | None
    """
    Contact
    """
    allocations: list[AllocationBase] | None
    """
    Allocation
    """


class Currency(CurrencyBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class CustomAction(CustomActionBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class CustomField(CustomFieldBase):
    model_config = ConfigDict(
        extra='allow',
    )
    picklist_options: list[PicklistOptionBase] | None
    """
    PicklistOption
    """


class CustomFieldMatterSelection(CustomFieldMatterSelectionBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class CustomFieldSet(CustomFieldSetBase):
    model_config = ConfigDict(
        extra='allow',
    )
    custom_fields: list[CustomFieldBase] | None
    """
    CustomField
    """


class CustomFieldValue(CustomFieldValueBase):
    model_config = ConfigDict(
        extra='allow',
    )
    custom_field: CustomField | None
    """
    CustomField
    """
    picklist_option: PicklistOption | None
    """
    PicklistOption
    """
    matter: CustomFieldMatterSelectionBase | None
    """
    CustomFieldMatterSelection
    """
    contact: ContactBase | None
    """
    Contact
    """


class Damage(DamageBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """


class Document(DocumentBase):
    model_config = ConfigDict(
        extra='allow',
    )
    parent: LinkedFolderBase | None
    """
    LinkedFolder
    """
    matter: MatterBase | None
    """
    Matter
    """
    contact: ContactBase | None
    """
    Contact
    """
    document_category: DocumentCategoryBase | None
    """
    DocumentCategory
    """
    creator: ClioCreatorBase | None
    """
    ClioCreator
    """
    latest_document_version: DocumentVersion | None
    """
    DocumentVersion
    """
    group: GroupBase | None
    """
    Group
    """
    external_properties: list[ExternalPropertyBase] | None
    """
    ExternalProperty
    """


class DocumentArchive(DocumentArchiveBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class DocumentAutomation(DocumentAutomationBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """
    document_template: DocumentTemplateBase | None
    """
    DocumentTemplate
    """
    documents: list[DocumentBase] | None
    """
    Document
    """


class DocumentCategory(DocumentCategoryBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class DocumentTemplate(DocumentTemplateBase):
    model_config = ConfigDict(
        extra='allow',
    )
    document_category: DocumentCategoryBase | None
    """
    DocumentCategory
    """
    last_modified_by: UserBase | None
    """
    User
    """


class DocumentVersion(DocumentVersionBase):
    model_config = ConfigDict(
        extra='allow',
    )
    creator: ClioCreatorBase | None
    """
    ClioCreator
    """
    put_headers: list[MultipartHeaderBase] | None
    """
    MultipartHeader
    """
    multiparts: list[Multipart] | None
    """
    Multipart
    """


class EmailAddress(EmailAddressBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Event(EventBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class EventMetrics(EventMetricsBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class ExpenseCategory(ExpenseCategoryBase):
    model_config = ConfigDict(
        extra='allow',
    )
    groups: list[GroupBase] | None
    """
    Group
    """
    utbms_code: UtbmsCodeBase | None
    """
    UtbmsCode
    """
    currency: CurrencyBase | None
    """
    Currency
    """


class Folder(FolderBase):
    model_config = ConfigDict(
        extra='allow',
    )
    parent: LinkedFolderBase | None
    """
    LinkedFolder
    """
    matter: MatterBase | None
    """
    Matter
    """
    contact: ContactBase | None
    """
    Contact
    """
    document_category: DocumentCategoryBase | None
    """
    DocumentCategory
    """
    creator: ClioCreatorBase | None
    """
    ClioCreator
    """
    latest_document_version: DocumentVersionBase | None
    """
    DocumentVersion
    """
    group: GroupBase | None
    """
    Group
    """
    external_properties: list[ExternalPropertyBase] | None
    """
    ExternalProperty
    """


class Grant(GrantBase):
    model_config = ConfigDict(
        extra='allow',
    )
    grant_funding_source: GrantFundingSourceBase | None
    """
    GrantFundingSource
    """


class GrantFundingSource(GrantFundingSourceBase):
    model_config = ConfigDict(
        extra='allow',
    )
    grants: list[GrantBase] | None
    """
    Grant
    """


class Group(GroupBase):
    model_config = ConfigDict(
        extra='allow',
    )
    users: list[UserBase] | None
    """
    User
    """


class Interest(InterestBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class InterestCharge(InterestChargeBase):
    model_config = ConfigDict(
        extra='allow',
    )
    bill: BillBase | None
    """
    Bill
    """
    balances: list[BalanceBase] | None
    """
    Balance
    """
    matters: list[MatterBase] | None
    """
    Matter
    """


class Item(ItemBase):
    model_config = ConfigDict(
        extra='allow',
    )
    parent: LinkedFolderBase | None
    """
    LinkedFolder
    """
    matter: MatterBase | None
    """
    Matter
    """
    contact: ContactBase | None
    """
    Contact
    """
    document_category: DocumentCategoryBase | None
    """
    DocumentCategory
    """
    creator: ClioCreatorBase | None
    """
    ClioCreator
    """
    latest_document_version: DocumentVersionBase | None
    """
    DocumentVersion
    """
    group: GroupBase | None
    """
    Group
    """
    external_properties: list[ExternalPropertyBase] | None
    """
    ExternalProperty
    """


class Jurisdiction(JurisdictionBase):
    model_config = ConfigDict(
        extra='allow',
    )
    service_types: list[ServiceTypeBase] | None
    """
    ServiceType
    """


class JurisdictionsToTrigger(JurisdictionsToTriggerBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class LaukCivilCertificatedRate(LaukCivilCertificatedRateBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class LaukCivilControlledRate(LaukCivilControlledRateBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class LaukCriminalControlledRate(LaukCriminalControlledRateBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class LaukExpenseCategory(LaukExpenseCategoryBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class LineItem(LineItemBase):
    model_config = ConfigDict(
        extra='allow',
    )
    bill: BillBase | None
    """
    Bill
    """
    activity: ActivityBase | None
    """
    Activity
    """
    matter: MatterBase | None
    """
    Matter
    """
    user: UserBase | None
    """
    User
    """
    discount: DiscountBase | None
    """
    Discount
    """
    included_line_item_totals: LineItemTotalsBase | None
    """
    LineItemTotals
    """


class LogEntry(LogEntryBase):
    model_config = ConfigDict(
        extra='allow',
    )
    item: PolymorphicObjectBase | None
    """
    PolymorphicObject
    """
    user: UserBase | None
    """
    User
    """


class Matter(MatterBase):
    model_config = ConfigDict(
        extra='allow',
    )
    client: ContactBase | None
    """
    Contact
    """
    contingency_fee: ContingencyFeeBase | None
    """
    ContingencyFee
    """
    custom_rate: MatterCustomRate | None
    """
    MatterCustomRate
    """
    evergreen_retainer: EvergreenRetainerBase | None
    """
    EvergreenRetainer
    """
    folder: FolderBase | None
    """
    Folder
    """
    group: GroupBase | None
    """
    Group
    """
    matter_budget: MatterBudgetBase | None
    """
    MatterBudget
    """
    matter_stage: MatterStageBase | None
    """
    MatterStage
    """
    originating_attorney: UserBase | None
    """
    User
    """
    practice_area: PracticeAreaBase | None
    """
    PracticeArea
    """
    responsible_attorney: UserBase | None
    """
    User
    """
    responsible_staff: UserBase | None
    """
    User
    """
    statute_of_limitations: TaskBase | None
    """
    Task
    """
    user: UserBase | None
    """
    User
    """
    legal_aid_uk_matter: LegalAidUkMatterBase | None
    """
    LegalAidUkMatter
    """
    currency: CurrencyBase | None
    """
    Currency
    """
    account_balances: list[AccountBalanceBase] | None
    """
    AccountBalance
    """
    custom_field_values: list[CustomFieldValue] | None
    """
    CustomFieldValue
    """
    custom_field_set_associations: list[CustomFieldSetAssociationBase] | None
    """
    CustomFieldSetAssociation
    """
    matter_bill_recipients: list[MatterBillRecipient] | None
    """
    MatterBillRecipient
    """
    relationships: list[RelationshipBase] | None
    """
    Relationship
    """
    task_template_list_instances: list[TaskTemplateListInstaceBase] | None
    """
    TaskTemplateListInstace
    """
    split_invoice_payers: list[SplitInvoicePayerBase] | None
    """
    SplitInvoicePayer
    """


class MatterBillRecipient(MatterBillRecipientBase):
    model_config = ConfigDict(
        extra='allow',
    )
    recipient: ContactBase | None
    """
    Contact
    """


class MatterContacts(MatterContactsBase):
    model_config = ConfigDict(
        extra='allow',
    )
    avatar: AvatarBase | None
    """
    Avatar
    """
    company: ContactBase | None
    """
    Contact
    """
    primary_address: AddressBase | None
    """
    Address
    """
    primary_web_site: WebSiteBase | None
    """
    WebSite
    """
    secondary_address: AddressBase | None
    """
    Address
    """
    secondary_web_site: WebSiteBase | None
    """
    WebSite
    """
    addresses: list[AddressBase] | None
    """
    Address
    """
    custom_field_values: list[CustomFieldValueBase] | None
    """
    CustomFieldValue
    """
    email_addresses: list[EmailAddressBase] | None
    """
    EmailAddress
    """
    phone_numbers: list[PhoneNumberBase] | None
    """
    PhoneNumber
    """
    web_sites: list[WebSiteBase] | None
    """
    WebSite
    """
    relationship: RelationshipBase | None
    """
    Relationship
    """


class MatterCustomRate(MatterCustomRateBase):
    model_config = ConfigDict(
        extra='allow',
    )
    rates: list[PolymorphicCustomRate] | None
    """
    PolymorphicCustomRate
    """


class MatterDocket(MatterDocketBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """
    jurisdiction: JurisdictionBase | None
    """
    Jurisdiction
    """
    trigger: JurisdictionsToTriggerBase | None
    """
    JurisdictionsToTrigger
    """
    service_type: ServiceTypeBase | None
    """
    ServiceType
    """
    calendar_entries: list[CalendarEntryBase] | None
    """
    CalendarEntry
    """


class MatterStage(MatterStageBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class MedicalBill(MedicalBillBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """
    liens: list[LienBase] | None
    """
    Lien
    """


class MedicalRecord(MedicalRecordBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """


class MedicalRecordsRequest(MedicalRecordsRequestBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """
    medical_provider: ContactBase | None
    """
    Contact
    """
    medical_bills: list[MedicalBillBase] | None
    """
    MedicalBill
    """
    medical_records: list[MedicalRecordBase] | None
    """
    MedicalRecord
    """


class Multipart(MultipartBase):
    model_config = ConfigDict(
        extra='allow',
    )
    put_headers: list[MultipartHeaderBase] | None
    """
    MultipartHeader
    """


class MyEvent(MyEventBase):
    model_config = ConfigDict(
        extra='allow',
    )
    event: EventBase | None
    """
    Event
    """


class Note(NoteBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """
    contact: ContactBase | None
    """
    Contact
    """
    author: UserBase | None
    """
    User
    """
    time_entries: list[ActivityBase] | None
    """
    Activity
    """
    notification_event_subscribers: list[NotificationEventSubscriberBase] | None
    """
    NotificationEventSubscriber
    """


class OutstandingClientBalance(OutstandingClientBalanceBase):
    model_config = ConfigDict(
        extra='allow',
    )
    outstanding_bills: list[BillBase] | None
    """
    Bill
    """
    contact: ContactBase | None
    """
    Contact
    """
    currency: CurrencyBase | None
    """
    Currency
    """


class Participant(ParticipantBase):
    model_config = ConfigDict(
        extra='allow',
    )
    avatar: AvatarBase | None
    """
    Avatar
    """


class Payment(PaymentBase):
    model_config = ConfigDict(
        extra='allow',
    )
    contact: ContactBase | None
    """
    Contact
    """
    user: UserBase | None
    """
    User
    """
    source_bank_account: BankAccountBase | None
    """
    BankAccount
    """
    destination_bank_account: BankAccountBase | None
    """
    BankAccount
    """
    allocations: list[AllocationBase] | None
    """
    Allocation
    """


class PhoneNumber(PhoneNumberBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class PicklistOption(PicklistOptionBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class PolymorphicCustomRate(PolymorphicCustomRateBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: PolymorphicCustomRateUserBase | None
    """
    User
    """
    group: PolymorphicCustomRateGroupBase | None
    """
    Group
    """
    activity_description: PolymorphicCustomRateActivityDescriptionBase | None
    """
    ActivityDescription
    """


class PracticeArea(PracticeAreaBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class RelatedContacts(RelatedContactsBase):
    model_config = ConfigDict(
        extra='allow',
    )
    avatar: AvatarBase | None
    """
    Avatar
    """
    company: ContactBase | None
    """
    Contact
    """
    primary_address: AddressBase | None
    """
    Address
    """
    primary_web_site: WebSiteBase | None
    """
    WebSite
    """
    secondary_address: AddressBase | None
    """
    Address
    """
    secondary_web_site: WebSiteBase | None
    """
    WebSite
    """
    addresses: list[AddressBase] | None
    """
    Address
    """
    custom_field_values: list[CustomFieldValueBase] | None
    """
    CustomFieldValue
    """
    email_addresses: list[EmailAddressBase] | None
    """
    EmailAddress
    """
    phone_numbers: list[PhoneNumberBase] | None
    """
    PhoneNumber
    """
    web_sites: list[WebSiteBase] | None
    """
    WebSite
    """
    relationship: RelationshipBase | None
    """
    Relationship
    """


class Relationship(RelationshipBase):
    model_config = ConfigDict(
        extra='allow',
    )
    matter: MatterBase | None
    """
    Matter
    """
    contact: ContactBase | None
    """
    Contact
    """


class Reminder(ReminderBase):
    model_config = ConfigDict(
        extra='allow',
    )
    notification_method: NotificationMethodBase | None
    """
    NotificationMethod
    """
    subject: PolymorphicObjectBase | None
    """
    PolymorphicObject
    """


class Report(ReportBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class ReportPreset(ReportPresetBase):
    model_config = ConfigDict(
        extra='allow',
    )
    report_schedule: ReportScheduleBase | None
    """
    ReportSchedule
    """


class ReportSchedule(ReportScheduleBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class ServiceType(ServiceTypeBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Task(TaskBase):
    model_config = ConfigDict(
        extra='allow',
    )
    time_entries: list[ActivityBase] | None
    """
    Activity
    """
    task_type: TaskTypeBase | None
    """
    TaskType
    """
    assigner: UserBase | None
    """
    User
    """
    matter: MatterBase | None
    """
    Matter
    """
    assignee: Participant | None
    """
    Participant
    """
    reminders: list[ReminderBase] | None
    """
    Reminder
    """


class TaskTemplate(TaskTemplateBase):
    model_config = ConfigDict(
        extra='allow',
    )
    cascading_source: CascadingTaskTemplateBase | None
    """
    CascadingTaskTemplate
    """
    assignee: UserBase | None
    """
    User
    """
    task_template_list: TaskTemplateListBase | None
    """
    TaskTemplateList
    """
    task_type: TaskTypeBase | None
    """
    TaskType
    """
    template_creator: UserBase | None
    """
    User
    """
    reminder_templates: list[ReminderTemplateBase] | None
    """
    ReminderTemplate
    """


class TaskTemplateList(TaskTemplateListBase):
    model_config = ConfigDict(
        extra='allow',
    )
    practice_area: PracticeAreaBase | None
    """
    PracticeArea
    """
    creator: UserBase | None
    """
    User
    """


class TaskType(TaskTypeBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class TextSnippet(TextSnippetBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Timer(TimerBase):
    model_config = ConfigDict(
        extra='allow',
    )
    activity: ActivityBase | None
    """
    Activity
    """


class TrustLineItem(TrustLineItemBase):
    model_config = ConfigDict(
        extra='allow',
    )
    bill: BillBase | None
    """
    Bill
    """
    matter: MatterBase | None
    """
    Matter
    """
    client: ContactBase | None
    """
    Contact
    """


class TrustRequest(TrustRequestBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class User(UserBase):
    model_config = ConfigDict(
        extra='allow',
    )
    default_activity_description: ActivityDescriptionBase | None
    """
    ActivityDescription
    """
    notification_methods: list[NotificationMethodBase] | None
    """
    NotificationMethod
    """
    account: AccountBase | None
    """
    Account
    """
    avatar: AvatarBase | None
    """
    Avatar
    """
    contact: ContactBase | None
    """
    Contact
    """
    job_title: JobTitleBase | None
    """
    JobTitle
    """
    groups: list[GroupBase] | None
    """
    Group
    """


class UtbmsCode(UtbmsCodeBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class UtbmsSet(UtbmsSetBase):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Webhook(WebhookBase):
    model_config = ConfigDict(
        extra='allow',
    )
    user: UserBase | None
    """
    User
    """
